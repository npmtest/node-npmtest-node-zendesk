{"/home/travis/build/npmtest/node-npmtest-node-zendesk/test.js":"/* istanbul instrument in package npmtest_node_zendesk */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/lib.npmtest_node_zendesk.js":"/* istanbul instrument in package npmtest_node_zendesk */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_zendesk = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_zendesk = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-zendesk && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_zendesk */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_zendesk\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_zendesk.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_zendesk.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_zendesk.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_zendesk.__dirname + '/lib.npmtest_node_zendesk.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client.js":"// client.js - node-zendesk client initialization\n'use strict';\n\nvar parts = [\n      'Users', 'Tickets', 'TicketAudits', 'TicketFields', 'TicketMetrics', 'TicketImport', 'TicketExport', \n      'Views', 'Requests', 'UserIdentities', 'Groups', 'GroupMemberships',\n      'CustomAgentRoles', 'Organizations', 'Search', 'Tags', 'Forums',\n      'ForumSubscriptions', 'Categories', 'Topics', 'TopicComments',\n      'TopicSubscriptions', 'TopicVotes', 'AccountSettings',\n      'ActivityStream', 'Attachments', 'JobStatuses', 'Locales',\n      'Macros', 'SatisfactionRatings', 'SuspendedTickets', 'UserFields',\n      'OrganizationFields', 'OauthTokens', 'Triggers', 'SharingAgreement',\n      'Brand', 'OrganizationMemberships', 'DynamicContent', 'TicketEvents',\n      'Imports', 'Targets', 'Sessions', 'Installations'\n    ],\n    helpcenterParts = [\n      'Articles', 'Sections', 'Categories', 'Translations',\n      'ArticleComments', 'ArticleLabels', 'ArticleAttachments',\n      'Votes', 'Search', 'AccessPolicies', 'Subscriptions'\n    ],\n    voiceParts = [\n      'PhoneNumbers', 'GreetingCategories', 'Greetings', 'CurrentQueueActivity',\n      'HistoricalQueueActivity', 'AgentActivity', 'Availabilities'\n    ];\n\nexports.createClient = function (options) {\n  var nconf = require('nconf'),\n      store = new nconf.Provider();\n  nconf.use('memory');\n  if (true !== options.disableGlobalState) {\n    nconf.env().argv({\n      's': {\n        alias: 'subdomain'\n      },\n      'u': {\n        alias: 'username'\n      },\n      'p': {\n        alias: 'password'\n      },\n      't': {\n        alias: 'token'\n      },\n      'r': {\n        alias: 'remoteUri'\n      },\n      'hc': {\n        alias: 'helpcenter'\n      },\n      'v': {\n        alias: 'voice'\n      }\n    });\n  }\n\n  options = store.defaults(options);\n\n  if (nconf.get('subdomain')) {\n    var endpoint;\n    if (options.stores.defaults.store.helpcenter) {\n      endpoint = '.zendesk.com/api/v2/help_center';\n    } else if (options.stores.defaults.store.voice){\n      endpoint = '.zendesk.com/api/v2/channels/voice';\n    } else {\n      endpoint = '.zendesk.com/api/v2';\n    }\n    options.stores.defaults.store.remoteUri = 'https://' + nconf.get('subdomain') + endpoint;\n  }\n\n  var client = {}, partsToAdd, clientPath;\n\n  if (options.stores.defaults.store.helpcenter) {\n    partsToAdd = helpcenterParts;\n    clientPath = './client/helpcenter/';\n  } else if (options.stores.defaults.store.voice) {\n    partsToAdd = voiceParts;\n    clientPath = './client/voice/';\n  } else {\n    partsToAdd = parts;\n    clientPath = './client/';\n  }\n\n\n  partsToAdd.forEach(function (k) {\n    exports[k] = require(clientPath + k.toLowerCase())[k];\n  });\n\n  partsToAdd.forEach(function (k) {\n    client[k.toLowerCase()] = new exports[k](options);\n    client[k.toLowerCase()].on('debug::request',  debug);\n    client[k.toLowerCase()].on('debug::response', debug);\n  });\n\n  function debug(args) {\n    if (options.get('debug')) {\n      console.log(args);\n    }\n  }\n\n  return client;\n};\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/accountsettings.js":"//AccountSettings.js: Client for the zendesk API.\n\n\nvar util        = require('util'),\n    Client      = require('./client').Client,\n    defaultgroups = require('./helpers').defaultgroups;\n\n\nvar AccountSettings = exports.AccountSettings = function (options) {\n  this.jsonAPINames = [ 'settings'] ;\n  Client.call(this, options);\n};\n\n// Inherit from Client base object\nutil.inherits(AccountSettings, Client);\n\n// ######################################################## AccountSettings\n// ====================================== Listing AccountSettings\nAccountSettings.prototype.show = function (cb) {\n  this.request('GET', ['account', 'settings'], cb);\n};\n\n\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/client.js":"// client.js - main client file that does most of the processing\n'use strict';\n\nvar fs           = require('fs'),\n    constants    = require('constants'),\n    request      = require('request'),\n    util         = require('util'),\n    EventEmitter = require('events').EventEmitter,\n    Client       = require('./client').Client,\n    qs           = require('querystring'),\n    async        = require('async'),\n    path         = require('path'),\n    flatten      = require('flatten'),\n    throttler    = require('./throttle'),\n    pjson        = require('./../../package.json'),\n    failCodes = {\n      400: 'Bad Request',\n      401: 'Not Authorized',\n      403: 'Forbidden',\n      404: 'Item not found',\n      405: 'Method not Allowed',\n      409: 'Conflict',\n      422: 'Unprocessable Entity',   // zendesk sends this one back when you re-use an organization name\n      429: 'Too Many Requests',\n      500: 'Internal Server Error',\n      503: 'Service Unavailable'\n    };\n\n\nClient = exports.Client = function (options) {\n  this.options = options;\n  this.sideLoad = [];\n  this.userAgent = 'node-zendesk/' + pjson.version + ' (node/' + process.versions.node + ')';\n  // Each client has its own cookies to isolate authentication between clients\n  this._request = request.defaults({\n    jar:      this.options.get('no-cookies') ? false : request.jar(),\n    encoding: this.options.get('encoding') || null,\n    timeout:  this.options.get('timeout')  || 240000,\n    proxy:    this.options.get('proxy')    || null,\n    secureOptions: constants.SSL_OP_NO_TLSv1_2,\n    forever: true,\n    pool: {maxSockets: 100}\n  });\n\n  if (!this.jsonAPINames) {\n    this.jsonAPINames = [];\n  }\n\n  if ('function' !== typeof this.options.get) {\n    this.options.get = function (key) {\n      return this[key];\n    };\n  }\n\n};\n\nutil.inherits(Client, EventEmitter);\n\nClient.prototype.request = function (method, uri) {\n  var options, url, self = this, res, args = Array.prototype.slice.call(arguments),\n      callback = args.pop(),\n      body     = 'object' === typeof args[args.length - 1] && !Array.isArray(args[args.length - 1]) && args.pop(),\n      auth     = this.options.get('password') ? ':' + this.options.get('password') : '/token:' + this.options.get('token'),\n      encoded  = new Buffer(this.options.get('username') + auth).toString('base64'),\n      proxy    = this.options.get('proxy'),\n      useOAuth = this.options.get('oauth'),\n      token    = this.options.get('token');\n\n  url = assembleUrl(self, uri);\n\n  if (options) { // is this ever used?\n    self.options.headers = options;\n  } else {\n    self.options.headers = {\n      'Content-Type': 'application/json',\n      'Accept':       'application/json',\n      'User-Agent':   self.userAgent,\n      'Content-Length': body.length\n    };\n  }\n\n  if (useOAuth) {// token is an oauth token obtained from OAuth2\n    self.options.headers.Authorization = 'Bearer ' + token;\n  } else {// token is an API token obtained from the Zendesk Settings UI\n    self.options.headers.Authorization = 'Basic ' + encoded;\n  }\n\n  self.options.uri = url;\n  self.options.method = method || 'GET';\n\n  if (body) {\n    self.options.body = JSON.stringify(body);\n  } else if ('GET' !== method && 'application/json' === self.options.headers['Content-Type']) {\n    self.options.body = '{}';\n  }\n\n  if (proxy) {\n    self.options.proxy = proxy;\n  }\n\n  self.emit('debug::request', self.options);\n\n  return this._request(self.options, function (err, response, result) {\n    requestCallback(self, err, response, result, callback);\n  });\n};\n\nClient.prototype.requestAll = function (method, uri) {\n  var args         = Array.prototype.slice.call(arguments),\n      callback     = args.pop(),\n      nextPage     = 'Not Null!',\n      bodyList     = [],\n      statusList   = [],\n      responseList = [],\n      resultList   = [],\n      self         = this,\n      throttle     = this.options.get('throttle'),\n      __request = Client.prototype.request;\n\n  if ( throttle ) {\n     __request = throttler( this, Client.prototype.request, throttle );\n  }\n\n  return __request.apply(this, args.concat(function (error, status, body, response, result) {\n    if (error) {\n      return callback(error);\n    }\n\n    statusList.push(status);\n    bodyList.push(body);\n    responseList.push(response);\n    resultList.push(result);\n    nextPage = result ? result.next_page : null;\n\n    async.whilst(\n      function () {\n        if (nextPage !== null) {\n          return nextPage;\n        } else {\n          nextPage = '';\n          return nextPage;\n        }\n      },\n      function (cb) {\n        __request.apply(self, ['GET', nextPage, function (error, status, body, response, result) {\n          if (error) {\n            return cb(error);\n          }\n\n          statusList.push(status);\n          bodyList.push(body);\n          responseList.push(response);\n          resultList.push(result);\n          nextPage = result ? result.next_page : null;\n          cb(null);\n        }]);\n      },\n      function (err) {\n        if (err) {\n          callback(err);\n        } else {\n          return callback(null, statusList, flatten(bodyList), responseList, resultList);\n        }\n      }\n      );\n  }));\n};\n\nClient.prototype.requestUpload = function (uri, file, callback) {\n  var self     = this,\n      out,\n      auth     = this.options.get('password') ? ':' + this.options.get('password') : '/token:' + this.options.get('token'),\n      encoded  = new Buffer(this.options.get('username') + auth).toString('base64'),\n      useOAuth = this.options.get('oauth'),\n      token    = this.options.get('token'),\n      uploadOptions = self.options;\n\n  self.options.uri = assembleUrl(self, uri);\n  self.options.method = 'POST';\n\n  self.options.headers = {'Content-Type': 'application/binary'};\n\n  if (useOAuth) {\n    self.options.headers.Authorization = 'Bearer ' + token;\n  } else {\n    self.options.headers.Authorization = 'Basic ' + encoded;\n  }\n\n  out = this._request(self.options, function (err, response, result) {\n    requestCallback(self, err, response, result, callback);\n  });\n\n  fs.createReadStream(file).pipe(out); // pipe the file!\n\n};\n\nClient.prototype.setSideLoad = function(arr){\n  var self = this;\n  self.sideLoad = arr;\n}\n\nfunction checkRequestResponse(self, response, result, callback) {\n  var statusCode, error, retryAfter, res;\n\n  if (!result) { // should this really be an error?\n    error = new Error('Zendesk returned an empty result');\n    error.statusCode = 204;\n    return callback(error);\n  }\n  try {\n    statusCode = response.statusCode;\n    res = JSON.parse(result);\n  }\n  catch (ex) {\n     // Emit Errors\n    self.emit('debug::error', {exception: ex, code: statusCode, request: self.options, result: result});\n  }\n\n  self.emit('debug::response', {statusCode: statusCode, result: result});\n\n  retryAfter = response.headers['retry-after'];\n  if (retryAfter) {\n    error = new Error('Zendesk rate limits 200 requests per minute');\n    error.statusCode = 429;\n    error.result = result;\n    error.retryAfter = retryAfter;\n    return callback(error);\n  }\n\n  if (failCodes[statusCode]) {\n    error = new Error('Zendesk Error (' + statusCode + '): ' + failCodes[statusCode]);\n    error.statusCode = statusCode;\n    error.result = result;\n    error.retryAfter = null;\n    return callback(error);\n  }\n\n  return callback(null, res);\n}\n\nfunction requestCallback(self, err, response, result, callback) {\n  if (err) {\n    return callback(err);\n  }\n\n  checkRequestResponse(self, response, result, function(err, res) {\n    if (err) {\n      return callback(err);\n    }\n    var body = null;\n    if (res) {\n      if (self.jsonAPINames){\n        for (var i = 0; i < self.jsonAPINames.length; i++){\n          if (res.hasOwnProperty(self.jsonAPINames[i].toString())){\n            body = res[self.jsonAPINames[i].toString()];\n            break;\n          }\n        }\n      }\n\n      if (!body) {\n        body = res;\n      }\n      if (self.hasOwnProperty('sideLoadMap')){\n        body = populateFields(body, res, self.sideLoadMap);\n      }\n    } else {\n      body = '';\n    }\n\n    return callback(null, response.statusCode, body, response, res);\n  });\n\n}\n\nfunction populateFields(data, response, map){\n  if (Array.isArray(data)){\n    for (var i = 0; i < data.length; i++){\n      var record = data[i];\n      populateRecord(record);\n    }\n  } else {\n    populateRecord(data);\n  }\n  return data;\n\n  function populateRecord(record){\n    for (var i = 0; i < map.length; i++){\n      var field   = map[i].field;\n      var name    = map[i].name;\n      var dataset = map[i].dataset;\n\n\n      if (record.hasOwnProperty(field) && response.hasOwnProperty(dataset)){\n        //If specifying all, then put everything in response[dataset] to record[name]\n        if ( map[i].hasOwnProperty('all') && map[i].all === true ){\n          record[name] = response[dataset];\n        } else {\n          var key = 'id';\n          if (map[i].hasOwnProperty('dataKey')){\n            key = map[i].dataKey;\n          }\n          if (map[i].hasOwnProperty('array') && map[i].array){\n            record[name] = findAllRecordsById(response[dataset], key, record[field]);\n          } else {\n            record[name] = findOneRecordById(response[dataset], key, record[field]);\n          }\n        }\n      }\n    }\n    return record;\n  }\n}\n\nfunction findAllRecordsById(data, key, id){\n  var arr = [];\n  for (var i = 0; i < data.length; i++){\n    if (data[i][key] === id){\n      arr.push(data[i]);\n    }\n  }\n  return arr;\n}\n\nfunction findOneRecordById(data, key, id){\n  for (var i = 0; i < data.length; i++){\n    if (data[i][key] === id){\n      return data[i];\n    }\n  }\n  return null;\n}\n\nfunction assembleUrl(self, uri) {\n  var lastElement,\n      params = '';\n\n  if ('object' === typeof uri && Array.isArray(uri)) {\n    lastElement = uri.pop();\n    if (lastElement) {\n      // we have received an object ex. {\"sort_by\":\"id\",\"sort_order\":\"desc\"}\n      if ('object' === typeof lastElement) {\n        if (self.sideLoad.length){\n          lastElement.include = self.sideLoad.join(',');\n        }\n        params = '?' + qs.stringify(lastElement);\n      }\n      // we have received a query string ex. '?sort_by=id&sort_order=desc'\n      else if (0 === lastElement.toString().indexOf('?')) {\n        if (self.sideLoad.length){\n          lastElement += '&include='+ self.sideLoad.join(',');\n        }\n        params = lastElement;\n      }\n      else {\n        if (self.sideLoad.length){\n          params = '?include=' + self.sideLoad.join(',');\n        }\n        uri.push(lastElement);\n      }\n    }\n    return self.options.get('remoteUri') + '/' + uri.join('/') + '.json' + params;\n  }\n  else if ('string' === typeof uri && uri.indexOf(self.options.get('remoteUri')) === -1) {\n    return self.options.get('remoteUri') + uri;\n  }\n  else {\n    return uri;\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/throttle.js":"/*\nfrom https://github.com/Raynos/throttle-function/blob/patch-1/index.js\n*/\n\nmodule.exports = throttle;\n\nfunction throttle() { /* [?thisArg], fn, opts */\n\tvar argmts = [].slice.call( arguments );\n\tvar thisarg = argmts.length > 2 ? argmts.shift() : null;\n\tvar fn = argmts[ 0 ];\n\tvar opts = argmts[ 1 ] || {};\n\n\tvar timer;\n\tvar queue = [];\n\tvar errMsg = 'Must pass options or milliseconds as second argument';\n\tif (!opts)\n\t\tthrow new Error(errMsg);\n\n\tvar msBetweenCalls;\n\n\tif (typeof opts == 'string')\n\t\tmsBetweenCalls = Number(opts);\n\n\telse if (typeof opts == 'number')\n\t\tmsBetweenCalls = opts;\n\n\telse {\n\t\tvar window = opts.window || 1;\n\t\tvar limit = opts.limit || 1;\n\t\tvar exact = opts.exact || false;\n\t\tmsBetweenCalls = Math.ceil((window / limit) * 1000);\n\t}\n\n\tif (isNaN(msBetweenCalls))\n\t\tthrow new Error(errMsg);\n\n\tfunction enqueue(args) {\n\t\treturn queue.push(args);\n\t}\n\n\tfunction dequeue() {\n\t\treturn queue.shift();\n\t}\n\n\tfunction kickQueue() {\n\t\tif (timer) return timer;\n\t\ttimer = setInterval(runQueue, msBetweenCalls);\n\t\treturn timer;\n\t}\n\n\tfunction runQueue() {\n\t\tvar args = dequeue();\n\n\t\tif (queue.length === 0 || !args) {\n\t\t\tclearInterval(timer);\n\t\t\ttimer = null;\n\t\t}\n\n\t\tvar result = fn.apply(thisarg, args);\n\t\treturn result;\n\t}\n\n\tvar throttled = function () {\n\t\tvar args = [].slice.call(arguments);\n\t\tvar position = enqueue(args);\n\t\tvar timer = kickQueue();\n\n\t\treturn {\n\t\t\tposition: position,\n\t\t\tqueuedAt: Date.now(),\n\t\t\ttimeUntilCall: position * msBetweenCalls\n\t\t};\n\t};\n\n\treturn throttled;\n}\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/helpers.js":"//\n// ### function defaultUser (appName)\n// #### @appName {String} App name\n//\n// A helper to prepend a default username.\n// needs 'this' to be able to options.get('username').\n//\nexports.defaultUser = function (appName) {\n  if (appName.search('/') === -1) {\n    appName = this.options.get('username') + '/' + appName;\n  }\n\n  return appName;\n};\n\nexports.getJobStatuses = function(options, jobID, interval, maxAttempts, cb) {\n  var nIntervId, // Interval handle\n      attempts = 0,\n      client = require('../client').createClient(options);\n  nIntervId = setInterval(function getJobStatusUntilComplete() { getJobStatus(jobID); },( interval||500));\n\n\n  function getJobStatus(id) {\n    client.jobstatuses.show(id, function(err, req, result) {\n      if(err && err.statusCode === 404 && attempts < (maxAttempts || 5)){\n        ++attempts;\n        console.log(\"Waiting for job to become available...[\"+attempts+\"]\");\n      } else {\n        if(err){clearInterval(nIntervId); return cb(err);}// Error\n\n        if(result[\"job_status\"].status === \"completed\"){\n          stopGetJobStatus();\n          console.log('Job '+id+' completed!');\n          return cb(null, req, result);\n        } else {\n          console.log('Job prgress: ' + result[\"job_status\"].progress + ' out of ' + result[\"job_status\"].total);\n        }\n      }\n    });\n  }\n  function stopGetJobStatus() {\n    clearInterval(nIntervId);\n  }\n};","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/activitystream.js":"//ActivityStream.js: Client for the zendesk API.\n\n\nvar util        = require('util'),\n    Client      = require('./client').Client,\n    defaultgroups = require('./helpers').defaultgroups;\n\n\nvar ActivityStream = exports.ActivityStream = function (options) {\n  this.jsonAPINames = [ 'activities', 'activity' ];\n  Client.call(this, options);\n};\n\n// Inherit from Client base object\nutil.inherits(ActivityStream, Client);\n\n// ######################################################## ActivityStream\n// ====================================== Listing ActivityStream\nActivityStream.prototype.list = function (cb) {\n  this.requestAll('GET', ['activities'], cb);//all\n};\n\n\n// ====================================== Viewing ActivityStream\n\nActivityStream.prototype.show = function (activityID, cb) {\n  this.request('GET', ['activities', activityID], cb);\n};\n\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/attachments.js":"//Attachments.js: Client for the zendesk API.\n'use strict';\n\nvar util        = require('util'),\n    Client      = require('./client').Client,\n    defaultgroups = require('./helpers').defaultgroups,\nAttachments = exports.Attachments = function (options) {\n  Client.call(this, options);\n};\n\n// Inherit from Client base object\nutil.inherits(Attachments, Client);\n\n// ====================================== Creating Upload\nAttachments.prototype.upload = function (file, fileOptions, cb) {\n  var fileOption = {\n    filename: fileOptions.filename\n  }\n\n  /**\n  * When attaching multiple files, a token is returned in \n  * the successful 201 response.\n  * This token can be used in subsequent requests in order\n  * to associate other attachments with a previous upload.  \n  * This token expires after 3 days.\n  */\n\n  if (fileOptions.hasOwnProperty('token')) {\n    fileOption.token = fileOptions.token\n  }\n\n  this.requestUpload(['uploads', fileOption], file, cb);\n\n};\n\n// ====================================== Deleteing Upload\nAttachments.prototype.deleteUpload = function (token, cb) {\n  this.request('DELETE', ['uploads', token],  cb);\n};\n\n// ====================================== Show an Attachment\nAttachments.prototype.show = function (attachmentID, cb) {\n  this.request('GET', ['attachments', attachmentID],  cb);\n};\n\n// ====================================== Delete an Attachment\nAttachments.prototype.delete = function (attachmentID, cb) {\n  this.request('DELETE', ['attachments', attachmentID],  cb);\n};\n\n// ====================================== Redacting Attachment Comments\nAttachments.prototype.redactAttachmentComment = function (ticketID, commentID, attachmentID, cb) {\n  this.request('DELETE', ['tickets', ticketID, 'comments', commentID, 'attachments', attachmentID, 'redact'], {}, cb);\n};","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/brand.js":"//Brand.js: Client for the zendesk API.\n\n\nvar util = require('util'),\n   Client = require('./client').Client,\n   defaultgroups = require('./helpers').defaultgroups;\n\n\nvar Brand = exports.Brand = function(options) {\n   this.jsonAPINames = [ 'sharing-agreement' ];\n   Client.call(this, options);\n};\n\n// Inherit from Client base object\nutil.inherits(Brand, Client);\n\n// ######################################################## Brand\n// ====================================== Listing Brands\nBrand.prototype.list = function(cb) {\n   this.request('GET', ['brands'], cb);\n};\n\n// ====================================== Show Brand\nBrand.prototype.show = function(brandId, cb) {\n   this.request('GET', ['brands'], cb);\n};\n\n// ====================================== Create Brand\nBrand.prototype.create = function(brand, cb) {\n   this.request('POST', ['brands'], brand, cb);\n};\n\n// ====================================== Update Brand\nBrand.prototype.update = function(brand, brandId, cb) {\n   this.request('PUT', ['brands', brandId], brand, cb);\n};\n\n// ====================================== Delete Brand\nBrand.prototype.delete = function(brandId, cb) {\n   this.request('DELETE', ['brands', brandId], cb);\n};\n\n// ====================================== Check Host Mapping Validity\nBrand.prototype.checkHostMapping = function(hostMapping, subdomain, brandId, cb) {\n   this.request('GET', ['brands', 'check_host_mapping'], cb);\n};\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/categories.js":"//Categories.js: Client for the zendesk API.\n\n\nvar util        = require('util'),\n    Client      = require('./client').Client,\n    defaultgroups = require('./helpers').defaultgroups;\n\n\nvar Categories = exports.Categories = function (options) {\n  this.jsonAPINames = [ 'categories', 'category' ];\n  Client.call(this, options);\n};\n\n// Inherit from Client base object\nutil.inherits(Categories, Client);\n\n// ######################################################## Categories\n// ====================================== Listing Categories\nCategories.prototype.list = function (cb) {\n  this.requestAll('GET', ['categories'], cb);//all\n};\n\n\n// ====================================== Viewing Categories\n\nCategories.prototype.show = function (categoryID, cb) {\n  this.request('GET', ['categories', categoryID], cb);\n};\n\n// ====================================== Creating Categories\nCategories.prototype.create = function (category, cb) {\n  this.request('POST', ['categories'], category, cb);\n};\n\n// ====================================== Updating Categories\n\nCategories.prototype.update = function (categoryID, category, cb) {\n  this.request('PUT', ['categories', categoryID], category, cb);\n};\n\n\n// ====================================== Deleting Categories\nCategories.prototype.delete = function (categoryID, cb) {\n  this.request('DELETE', ['categories', categoryID],  cb);\n};\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/customagentroles.js":"//CustomAgentRoles.js: Client for the zendesk API.\n\n\nvar util        = require('util'),\n    Client      = require('./client').Client,\n    defaultgroups = require('./helpers').defaultgroups;\n\n\nvar CustomAgentRoles = exports.CustomAgentRoles = function (options) {\n  this.jsonAPINames  = [ 'custom_roles' ];\n  Client.call(this, options);\n};\n\n// Inherit from Client base object\nutil.inherits(CustomAgentRoles, Client);\n\n// ######################################################## CustomAgentRoles\n// ====================================== Listing CustomAgentRoles\nCustomAgentRoles.prototype.list = function (cb) {\n  this.requestAll('GET', ['custom_roles'], cb);//all\n};\n\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/dynamiccontent.js":"var util        = require('util'),\n    Client      = require('./client').Client;\n\n\nvar DynamicContent = exports.DynamicContent = function (options) {\n  this.jsonAPINames = [ 'items', 'variants' ];\n  Client.call(this, options);\n};\n\nutil.inherits(DynamicContent, Client);\n\n\nDynamicContent.prototype.listItems = function (cb) {\n  this.request('GET', ['dynamic_content', 'items'], cb);\n};\n\nDynamicContent.prototype.listAllItems = function (cb) {\n  this.requestAll('GET', ['dynamic_content', 'items'], cb);\n};\n\nDynamicContent.prototype.showItem = function (itemID, cb) {\n  this.request('GET', ['dynamic_content', 'items', itemID], cb);\n};\n\nDynamicContent.prototype.createItem = function(item, cb) {\n  this.request('POST', ['dynamic_content', 'items'], item, cb);\n};\n\nDynamicContent.prototype.updateItem = function(itemID, item, cb) {\n  this.request('PUT', ['dynamic_content', 'items', itemID], item, cb);\n};\n\nDynamicContent.prototype.deleteItem = function (itemID, cb) {\n  this.request('DELETE', ['dynamic_content', 'items', itemID],  cb);\n};\n\n\nDynamicContent.prototype.listVariants = function (itemID, cb) {\n  this.request('GET', ['dynamic_content', 'items', itemID, 'variants'], cb);\n};\n\nDynamicContent.prototype.listAllVariants = function (itemID, cb) {\n  this.requestAll('GET', ['dynamic_content', 'items', itemID, 'variants'], cb);\n};\n\n\nDynamicContent.prototype.showVariant = function (itemID, variantID, cb) {\n  this.request('GET', ['dynamic_content', 'items', itemID, 'variants', variantID], cb);\n};\n\nDynamicContent.prototype.createVariant = function (itemID, variant, cb) {\n  this.request('POST', ['dynamic_content', 'items', itemID, 'variants'], variant, cb);\n};\n\nDynamicContent.prototype.updateVariant = function (itemID, variantID, variant, cb) {\n  this.request('PUT', ['dynamic_content', 'items', itemID, 'variants', variantID], variant, cb);\n};\n\nDynamicContent.prototype.deleteVariant = function (itemID, variantID, cb) {\n  this.request('DELETE', ['dynamic_content', 'items', itemID, 'variants', variantID], cb);\n};\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/forums.js":"//Forums.js: Client for the zendesk API.\n\n\nvar util        = require('util'),\n    Client      = require('./client').Client,\n    defaultgroups = require('./helpers').defaultgroups;\n\n\nvar Forums = exports.Forums = function (options) {\n  this.jsonAPINames = [ 'forums', 'forum' ];\n  Client.call(this, options);\n};\n\n// Inherit from Client base object\nutil.inherits(Forums, Client);\n\n// ######################################################## Forums\n// ====================================== Listing Forums\nForums.prototype.list = function (cb) {\n  this.requestAll('GET', ['forums'], cb);//all\n};\n\nForums.prototype.listByCategory = function (categoryID, cb) {\n  this.requestAll('GET', ['categories', categoryID, 'forums'], cb);//all\n};\n\n\n// ====================================== Viewing Forums\n\nForums.prototype.show = function (forumID, cb) {\n  this.request('GET', ['forums', forumID], cb);\n};\n\n// ====================================== Creating Forums\nForums.prototype.create = function (forum, cb) {\n  this.request('POST', ['forums'], forum, cb);\n};\n\n// ====================================== Updating Forums\n\nForums.prototype.update = function (forumID, forum, cb) {\n  this.request('PUT', ['forums', forumID], forum, cb);\n};\n\n\n// ====================================== Deleting Forums\nForums.prototype.delete = function (forumID, cb) {\n  this.request('DELETE', ['forums', forumID],  cb);\n};\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/forumsubscriptions.js":"//ForumSubscriptions.js: Client for the zendesk API.\n\n\nvar util        = require('util'),\n    Client      = require('./client').Client,\n    defaultgroups = require('./helpers').defaultgroups;\n\n\nvar ForumSubscriptions = exports.ForumSubscriptions = function (options) {\n  this.jsonAPINames = [ 'forum_subscriptions', 'forum_subscription' ];\n  Client.call(this, options);\n};\n\n// Inherit from Client base object\nutil.inherits(ForumSubscriptions, Client);\n\n// ######################################################## ForumSubscriptions\n// ====================================== Listing ForumSubscriptions\nForumSubscriptions.prototype.list = function (cb) {\n  this.requestAll('GET', ['forum_subscriptions'], cb);//all\n};\nForumSubscriptions.prototype.listByForum = function (forumID, cb) {\n  this.requestAll('GET', ['forum', forumID, 'subscriptions'], cb);//all\n};\n\n\n\n// ====================================== Viewing ForumSubscriptions\n\nForumSubscriptions.prototype.show = function (forumSubscriptionID, cb) {\n  this.request('GET', ['forum_subscriptions', forumSubscriptionID], cb);\n};\n\n// ====================================== Creating ForumSubscriptions\nForumSubscriptions.prototype.create = function (forumSubscription, cb) {\n  this.request('POST', ['forum_subscriptions'], forumSubscription, cb);\n};\n\n\n// ====================================== Deleting ForumSubscriptions\nForumSubscriptions.prototype.delete = function (forumSubscriptionID, cb) {\n  this.request('DELETE', ['forum_subscriptions', forumSubscriptionID],  cb);\n};\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/groupmemberships.js":"//GroupMemberships.js: Client for the zendesk API.\n\n\nvar util        = require('util'),\n    Client      = require('./client').Client,\n    defaultgroup_memberships = require('./helpers').defaultgroup_memberships;\n\n\nvar GroupMemberships = exports.GroupMemberships = function (options) {\n  this.jsonAPINames  = [ 'group_memberships', 'group_membership' ];\n  this.sideLoadMap = [\n    { field: 'group_id',    name: 'groups',   dataset: 'groups'},\n    { field: 'user_id',     name: 'user',     dataset: 'users'}\n  ];\n  Client.call(this, options);\n};\n\n// Inherit from Client base object\nutil.inherits(GroupMemberships, Client);\n\n// ######################################################## GroupMemberships\n// ====================================== Listing GroupMemberships\nGroupMemberships.prototype.list = function (cb) {\n  this.requestAll('GET', ['group_memberships'], cb);//all\n};\n\nGroupMemberships.prototype.listByUser = function (userID, cb) {\n  this.requestAll('GET', ['users', userID, 'group_memberships'], cb);//all\n};\n\nGroupMemberships.prototype.listByGroup = function (groupID, cb) {\n  this.requestAll('GET', ['groups', groupID, 'group_memberships'], cb);//all\n};\n\n\n\n// ====================================== Viewing GroupMemberships\n\nGroupMemberships.prototype.show = function (groupMembershipID, cb) {\n  this.request('GET', ['group_memberships', groupMembershipID], cb);\n};\n\nGroupMemberships.prototype.showByUser = function (userID, groupMembershipID, cb) {\n  this.request('GET', ['users', userID, 'group_memberships', groupMembershipID], cb);\n};\n\n// ====================================== Creating GroupMemberships\nGroupMemberships.prototype.create = function (groupMembership, cb) {\n  this.request('POST', ['group_memberships'], groupMembership, cb);\n};\n\nGroupMemberships.prototype.createByUser = function (userID, groupMembership, cb) {\n  this.request('POST', ['users', userID, 'group_memberships'], groupMembership, cb);\n};\n\n\n// ====================================== Deleting GroupMemberships\nGroupMemberships.prototype.delete = function (groupMembershipID, cb) {\n  this.request('DELETE', ['group_memberships', groupMembershipID],  cb);\n};\n\nGroupMemberships.prototype.deleteByUser = function (userID, groupMembershipID, cb) {\n  this.request('DELETE', ['users', userID, 'group_memberships', groupMembershipID],  cb);\n};\n\n// ====================================== Set membership as default\nGroupMemberships.prototype.makeDefault = function (userID, groupMembershipID, cb) {\n  this.request('PUT', ['users', userID, 'group_memberships', groupMembershipID, 'make_default'], cb);\n};\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/groups.js":"//Groups.js: Client for the zendesk API.\n\n\nvar util        = require('util'),\n    Client      = require('./client').Client,\n    defaultgroups = require('./helpers').defaultgroups;\n\n\nvar Groups = exports.Groups = function (options) {\n  this.jsonAPINames = [ 'groups', 'group' ];\n  this.sideLoadMap = [\n    { field: 'user_id', name: 'users', dataset: 'users', all: true }\n  ];\n  Client.call(this, options);\n};\n\n// Inherit from Client base object\nutil.inherits(Groups, Client);\n\n// ######################################################## Groups\n// ====================================== Listing Groups\nGroups.prototype.list = function (cb) {\n  this.requestAll('GET', ['groups'], cb);//all\n};\n\n\n// ====================================== Viewing Groups\nGroups.prototype.assignable = function (cb) {\n  this.request('GET', ['groups', 'assignable'], cb);//all\n};\n\nGroups.prototype.show = function (groupID, cb) {\n  this.request('GET', ['groups', groupID], cb);\n};\n\n// ====================================== Creating Groups\nGroups.prototype.create = function (group, cb) {\n  this.request('POST', ['groups'], group, cb);\n};\n\n// ====================================== Updating Groups\n\nGroups.prototype.update = function (groupID, group, cb) {\n  this.request('PUT', ['groups', groupID], group, cb);\n};\n\n\n// ====================================== Deleting Groups\nGroups.prototype.delete = function (groupID, cb) {\n  this.request('DELETE', ['groups', groupID],  cb);\n};\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/imports.js":"//imports.js: Client for the zendesk API.\n\n\nvar util        = require('util'),\n    Client      = require('./client').Client,\n    defaultUser = require('./helpers').defaultUser;\n\n\nvar Imports = exports.Imports = function (options) {\n  this.jsonAPINames = ['tickets', 'ticket'];\n\n  Client.call(this, options);\n};\n\n// Inherit from Client base object\nutil.inherits(Imports, Client);\n\n// ######################################################## Imports\n// ======================================  Import Ticket\nImports.prototype.ticket = function (ticket, cb) {\n  this.request('POST', ['imports', 'tickets'], ticket, cb);\n};\n\n// ======================================  Import Many Tickets\nImports.prototype.ticketMany = function (tickets, cb) {\n  this.requestAll('POST', ['imports', 'tickets', 'create_many'], tickets, cb);//all\n};\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/installations.js":"//installations.js: Client for the zendesk API.\n\nvar util        = require('util'),\n  Client      = require('./client').Client;\n\n\nvar Installations = exports.Installations = function (options) {\n  this.jsonAPINames = [ 'installations', 'installation' ];\n  Client.call(this, options);\n};\n\n// Inherit from Client base object\nutil.inherits(Installations, Client);\n\n// ######################################################## Installations\n// ====================================== Listing Installations\nInstallations.prototype.list = function (cb) {\n  this.requestAll('GET', ['apps', 'installations'], cb);//all\n};\n\n// ====================================== Viewing Installations\nInstallations.prototype.show = function (installationID, cb) {\n  this.request('GET', ['apps', 'installations', installationID], cb);\n};\n\n// ====================================== Creating Installations\nInstallations.prototype.create = function (installation, cb) {\n  this.request('POST', ['apps', 'installations'], installation,  cb);\n};\n\n// ====================================== Updating Installations\nInstallations.prototype.update = function (installationID, installation, cb) {\n  this.request('PUT', ['apps', 'installations', installationID], installation,  cb);\n};\n\n// ====================================== Deleting Installations\nInstallations.prototype.delete = function (installationID, cb) {\n  this.request('DELETE', ['apps', 'installations', installationID],  cb);\n};","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/jobstatuses.js":"//JobStatuses.js: Client for the zendesk API.\n\n\nvar util           = require('util'),\n    Client         = require('./client').Client,\n    getJobStatuses = require('./helpers').getJobStatuses;\n\n\nvar JobStatuses = exports.JobStatuses = function (options) {\n  this.jsonAPINames = [ 'jobstatuses' ];\n  Client.call(this, options);\n};\n\n// Inherit from Client base object\nutil.inherits(JobStatuses, Client);\n\n\n// ====================================== Get JobStatuses\nJobStatuses.prototype.show = function (jobStatusID, cb) {\n  this.request('GET', ['job_statuses', jobStatusID], cb);\n};\n\nJobStatuses.prototype.watch = function (jobID, interval, maxAttempts, cb) {\n  getJobStatuses(this.options, jobID, interval, maxAttempts, cb);\n};\n\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/locales.js":"//Locales.js: Client for the zendesk API.\n\n\nvar util        = require('util'),\n    Client      = require('./client').Client,\n    defaultgroups = require('./helpers').defaultgroups;\n\n\nvar Locales = exports.Locales = function (options) {\n  this.jsonAPINames = [ 'locales', 'locale' ];\n  Client.call(this, options);\n};\n\n// Inherit from Client base object\nutil.inherits(Locales, Client);\n\n// ######################################################## Locales\n// ====================================== Listing Locales\nLocales.prototype.list = function (cb) {\n  this.requestAll('GET', ['locales'], cb);//all\n};\n\n\n// ====================================== Viewing Locales\n\nLocales.prototype.show = function (localeID, cb) {\n  this.request('GET', ['locales', localeID], cb);\n};\n\nLocales.prototype.showCurrent = function (cb) {\n  this.request('GET', ['locales', 'current'], cb);\n};\nLocales.prototype.current = function (cb) {\n  this.request('GET', ['locales', 'current'], cb);\n};\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/macros.js":"//Macros.js: Client for the zendesk API.\n\n\nvar util        = require('util'),\n    Client      = require('./client').Client,\n    defaultgroups = require('./helpers').defaultgroups;\n\n\nvar Macros = exports.Macros = function (options) {\n  this.jsonAPINames = [ 'macros' ];\n  Client.call(this, options);\n};\n\n// Inherit from Client base object\nutil.inherits(Macros, Client);\n\n// ######################################################## Macros\n// ====================================== Listing Macros\nMacros.prototype.list = function (cb) {\n  this.requestAll('GET', ['macros', 'active'], cb);//all\n};\n\nMacros.prototype.listByParams = function (params, cb) {\n  this.requestAll('GET', ['macros', params], cb);\n};\n\nMacros.prototype.apply = function (macroID, cb) {\n  this.request('GET', ['macros', macroID, 'apply'], cb);//all\n};\nMacros.prototype.applyTicket = function (ticketID, macroID, cb) {\n  this.request('GET', ['tickets', ticketID, 'macros', macroID, 'apply'], cb);//all\n};\n\nMacros.prototype.create = function (macro, cb) {\n  this.request('POST', ['macros'], macro, cb);\n};\n\nMacros.prototype.categories = function (cb) {\n  this.requestAll('GET', ['macros', 'categories'], cb);\n};\n\n// ====================================== Updating Tickets Fields\nMacros.prototype.update = function (macroID, macro, cb) {\n  this.request('PUT', ['macros', macroID], macro, cb);\n};\n\n// ====================================== Deleting Macros\nMacros.prototype.delete = function (macroID, cb) {\n  this.request('DELETE', ['macros', macroID],  cb);\n};\n\nMacros.prototype.createMany = function (users, cb) {\n  this.request('POST', ['users', 'create_many'], users, cb);\n};\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/oauthtokens.js":"//oauthtokens.js: Client for the zendesk API.\n\nvar util        = require('util'),\n    Client      = require('./client').Client,\n    defaultUser = require('./helpers').defaultUser;\n\nvar OauthTokens = exports.OauthTokens = function (options) {\n  this.jsonAPINames = [ 'oauthtokens', 'oauthtoken' ];\n  Client.call(this, options);\n};\n\n// Inherit from Client base object\nutil.inherits(OauthTokens, Client);\n\nOauthTokens.prototype.show = function (id, cb) {\n  this.request('GET', ['oauth', 'tokens', id], cb);\n};\n\nOauthTokens.prototype.current = function (cb) {\n  this.show('current', cb);\n};\n\nOauthTokens.prototype.list = function (cb) {\n  this.requestAll('GET', ['oauth', 'tokens'], cb);\n};\n\nOauthTokens.prototype.revoke = function (id, cb) {\n  this.request('DELETE', ['oauth', 'tokens', id], cb);\n};\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/organizationfields.js":"//organizationfields.js: Client for the zendesk API.\n\n\nvar util        = require('util'),\n    Client      = require('./client').Client,\n    defaultUser = require('./helpers').defaultUser;\n\n\nvar OrganizationFields = exports.OrganizationFields = function (options) {\n  this.jsonAPINames = [ 'organization_fields', 'organization_field' ];\n  Client.call(this, options);\n};\n\n// Inherit from Client base object\nutil.inherits(OrganizationFields, Client);\n\n// ######################################################## OrganizationFields\n// ====================================== Listing OrganizationFields\nOrganizationFields.prototype.list = function (cb) {\n  this.requestAll('GET', ['organization_fields'], cb);//all\n};\n\n\n// ====================================== Viewing OrganizationFields\nOrganizationFields.prototype.show = function (organizationFieldID, cb) {\n  this.request('GET', ['organization_fields', organizationFieldID], cb);\n};\n\n// ====================================== Creating OrganizationFields\nOrganizationFields.prototype.create = function (organizationField, cb) {\n  this.request('POST', ['organization_fields'], organizationField, cb);\n};\n\n// ====================================== Updating OrganizationFields\nOrganizationFields.prototype.update = function (organizationFieldID, organizationField, cb) {\n  this.request('PUT', ['organization_fields', organizationFieldID], organizationField, cb);\n};\n\n// ====================================== Deleting OrganizationFields\nOrganizationFields.prototype.delete = function (organizationFieldID, cb) {\n  this.request('DELETE', ['organization_fields', organizationFieldID],  cb);\n};\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/organizationmemberships.js":"//Organizations.js: Client for the zendesk API.\n\n\nvar util        = require('util'),\n    Client      = require('./client').Client,\n    defaultgroups = require('./helpers').defaultgroups;\n\n\nvar OrganizationMemberships = exports.OrganizationMemberships = function (options) {\n  this.jsonAPINames = [ 'organization_membership', 'organization_memberships' ];\n  Client.call(this, options);\n};\n\n// Inherit from Client base object\nutil.inherits(OrganizationMemberships, Client);\n\n// ######################################################## Organizations\n// ====================================== Listing Organization Memberships\nOrganizationMemberships.prototype.list = function (cb) {\n  this.requestAll('GET', ['organization_memberships'], cb);//all\n};\n\nOrganizationMemberships.prototype.listByUser = function (userID, cb) {\n  this.requestAll('GET', ['users', userID, 'organization_memberships'], cb);//all\n};\n\nOrganizationMemberships.prototype.listByOrganization = function (organiationID, cb) {\n  this.requestAll('GET', ['organizations', organiationID, 'organization_memberships'], cb);//all\n};\n\n// ====================================== Viewing Organization Memberships\nOrganizationMemberships.prototype.show = function (organizationMembershipID, cb) {\n  this.request('GET', ['organization_memberships', organizationMembershipID], cb);\n};\n\nOrganizationMemberships.prototype.showByUser = function (userID, organizationMembershipID, cb) {\n  this.request('GET', ['users', userID, 'organization_memberships', organizationMembershipID], cb);\n};\n\n// ====================================== Creating Organization Memberships\nOrganizationMemberships.prototype.create = function (organizationMembership, cb) {\n  this.request('POST', ['organization_memberships'], organizationMembership, cb);\n};\n\nOrganizationMemberships.prototype.createByUser = function (userID, organizationMembership, cb) {\n  this.request('POST', ['users', userID, 'organization_memberships'], organizationMembership, cb);\n};\n\nOrganizationMemberships.prototype.createMany = function (organizationMemberships, cb) {\n  this.request('POST', ['organization_memberships', 'create_many'], organizationMemberships, cb);\n};\n\n// ====================================== Deleting Organization Memberships\nOrganizationMemberships.prototype.delete = function (organizationMembershipID, cb) {\n  this.request('DELETE', ['organization_memberships', organizationMembershipID],  cb);\n};\n\nOrganizationMemberships.prototype.deleteByUser = function (userID, organizationMembershipID, cb) {\n  this.request('DELETE', ['users', userID, 'organization_memberships', organizationMembershipID],  cb);\n};\n\nOrganizationMemberships.prototype.deleteMany = function (organizationMembershipIDs, cb) {\n  this.request('DELETE', ['organization_memberships', 'destroy_many'], organizationMembershipID, cb);\n};\n\n// ====================================== Make Default Organization Membership\nOrganizationMemberships.prototype.makeDefault = function (userID, organizationMembershipID, cb) {\n  this.request('PUT', ['users', userID, 'organization_memberships', organizationMembershipID, \"make_default\"],  cb);\n};\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/organizations.js":"//Organizations.js: Client for the zendesk API.\n\n\nvar util        = require('util'),\n    Client      = require('./client').Client,\n    defaultgroups = require('./helpers').defaultgroups;\n\n\nvar Organizations = exports.Organizations = function (options) {\n  this.jsonAPINames = [ 'organizations', 'organization' ];\n  Client.call(this, options);\n};\n\n// Inherit from Client base object\nutil.inherits(Organizations, Client);\n\n// ######################################################## Organizations\n// ====================================== Listing Organizations\nOrganizations.prototype.list = function (cb) {\n  this.requestAll('GET', ['organizations'], cb);//all\n};\n\n\n// ====================================== Viewing Organizations\n\nOrganizations.prototype.show = function (organizationID, cb) {\n  this.request('GET', ['organizations', organizationID], cb);\n};\n\n// ====================================== Creating Organizations\nOrganizations.prototype.create = function (organization, cb) {\n  this.request('POST', ['organizations'], organization, cb);\n};\n\n// ====================================== Updating Organizations\n\nOrganizations.prototype.update = function (organizationID, organization, cb) {\n  this.request('PUT', ['organizations', organizationID], organization, cb);\n};\n\n\n// ====================================== Deleting Organizations\nOrganizations.prototype.delete = function (organizationID, cb) {\n  this.request('DELETE', ['organizations', organizationID],  cb);\n};\n\n// ====================================== Search Organizations\nOrganizations.prototype.search = function (params, cb) {\n  this.requestAll('GET', ['organizations', 'search', params], cb);\n};\n\n// ====================================== Autocomplete Organizations\nOrganizations.prototype.autocomplete = function (params, cb) {\n  this.requestAll('GET', ['organizations', 'autocomplete', params], cb);\n};\n\n//  ====================================== New Incremental Organization Export with include\nOrganizations.prototype.incrementalInclude = function (startTime, include, cb) {\n  this.request('GET', ['incremental', 'organizations', {start_time: startTime, include: include}],  cb);\n};\n\n//  ====================================== New Incremental Organization Export\nOrganizations.prototype.incremental = function (startTime, cb) {\n  this.request('GET', ['incremental', 'organizations', {start_time: startTime}],  cb);\n};\n//  ====================================== New Incremental Organization Export Sample\nOrganizations.prototype.incrementalSample = function (startTime, cb) {\n  this.request('GET', ['incremental', 'organizations', 'sample', {start_time: startTime}],  cb);\n};\n\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/requests.js":"//requests.js: A Request is a Ticket object as seen by an end-user\n//\n// ########################################################################\n// From http://developer.zendesk.com/documentation/rest_api/requests.html\n// ########################################################################\n//\n// A request is an end-user's perspective on a ticket. End-users can only see\n// public comments and certain fields of a ticket. Use this API to let end-users\n// view, update, and create tickets they have access to.\n//\n// Authentication\n//\n// You must use the following authentication credentials with this API:\n//  * Use the end-user's email address, not an agent's email address as is the\n//    case with all other API end-points.\n//\n//  * Use your API token as the password, and append /token to the email address.\n//    To get your API token, go to Manage > Channels in Zendesk, and then click\n//    the Edit link in the API channel.\n\nvar util        = require('util'),\n    Client      = require('./client').Client,\n    defaultUser = require('./helpers').defaultUser;\n\n\nvar Requests = exports.Requests = function (options) {\n  this.jsonAPINames = [ 'requests', 'request' ];\n  this.sideLoadMap = [\n    { field: 'assignee_id',     name: 'assignee',     dataset: 'users'},\n    { field: 'requester_id',    name: 'requester',    dataset: 'users'},\n    { field: 'organization_id', name: 'organization', dataset: 'organizations'},\n  ];\n  Client.call(this, options);\n};\n\n// Inherit from Client base object\nutil.inherits(Requests, Client);\n\n// ######################################################## Requests\n// ====================================== Listing Requests\nRequests.prototype.list = function (cb) {\n  this.requestAll('GET', ['requests'], cb);//all\n};\n\nRequests.prototype.listOpen = function (cb) {\n  this.requestAll('GET', ['requests', 'open'], cb);//all\n};\n\nRequests.prototype.listSolved = function (cb) {\n  this.requestAll('GET', ['requests', 'solved'], cb);//all\n};\n\nRequests.prototype.listCCD = function (orgID, cb) {\n  this.requestAll('GET', ['requests', 'ccd'], cb);//all\n};\n\nRequests.prototype.listByUser = function (userID, cb) {\n  this.requestAll('GET', ['users', userID, 'requests'], cb);//all\n};\n\nRequests.prototype.listByOrganization = function (orgID, cb) {\n  this.requestAll('GET', ['organizations', orgID, 'requests'], cb);//all\n};\n\n// ====================================== Viewing Requests\nRequests.prototype.getRequest = function (requestID, cb) {\n  this.request('GET', ['requests', requestID], cb);\n};\n\n// ====================================== Creating Requests\nRequests.prototype.create = function (request, cb) {\n  this.request('POST', ['requests'], request,  cb);\n};\n\n// ====================================== Updating Requests\nRequests.prototype.update = function (requestID, request, cb) {\n  this.request('PUT', ['requests', requestID], request,  cb);\n};\n\n// ====================================== Listing Comments\nRequests.prototype.listComments = function (requestID, cb) {\n  this.requestAll('GET', ['requests', requestID, 'comments'], cb);//all\n};\n\n// ====================================== Get Comment\nRequests.prototype.getComment = function (requestID, commentID, cb) {\n  this.requestAll('GET', ['requests', requestID, 'comments', commentID], cb);\n};\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/satisfactionratings.js":"//SatisfactionRatings.js: Client for the zendesk API.\n\n\nvar util        = require('util'),\n    Client      = require('./client').Client,\n    defaultgroups = require('./helpers').defaultgroups;\n\n\nvar SatisfactionRatings = exports.SatisfactionRatings = function (options) {\n  this.jsonAPINames = [ 'satisfaction_ratings' ];\n  Client.call(this, options);\n};\n\n// Inherit from Client base object\nutil.inherits(SatisfactionRatings, Client);\n\n// ######################################################## SatisfactionRatings\n// ====================================== Listing SatisfactionRatings\nSatisfactionRatings.prototype.list = function (cb) {\n  this.requestAll('GET', ['satisfaction_ratings'], cb);//all\n};\n\nSatisfactionRatings.prototype.received = function (cb) {\n  this.requestAll('GET', ['satisfaction_ratings', 'received'], cb);//all\n};\n\nSatisfactionRatings.prototype.show = function (satisfactionRatingID, cb) {\n  this.request('GET', ['satisfaction_ratings', satisfactionRatingID], cb);//all\n};\n\n// ====================================== Posting SatisfactionRatings\nSatisfactionRatings.prototype.create = function (ticketID, satisfactionRating, cb) {\n  this.request('POST', ['tickets', ticketID, 'satisfaction_rating'], satisfactionRating, cb);\n};\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/search.js":"//Search.js: Client for the zendesk API.\n\n\nvar util        = require('util'),\n    Client      = require('./client').Client,\n    defaultgroups = require('./helpers').defaultgroups;\n\n\nvar Search = exports.Search = function (options) {\n  this.jsonAPINames = [ 'results' ];\n  Client.call(this, options);\n};\n\n// Inherit from Client base object\nutil.inherits(Search, Client);\n\n// ######################################################## Search\n// ====================================== Listing Search\nSearch.prototype.query = function (searchTerm, cb) {\n  this.request('GET', ['search', {query: searchTerm}], cb);\n};\n\nSearch.prototype.queryAll = function (searchTerm, cb) {\n  this.requestAll('GET', ['search', {query: searchTerm}], cb);//all?\n};\n\nSearch.prototype.queryAnonymous  = function (searchTerm, cb) {\n  this.request('GET', ['portal', 'search', {query: searchTerm}], cb);\n};\n\n\nSearch.prototype.queryAnonymousAll  = function (searchTerm, cb) {\n  this.requestAll('GET', ['portal', 'search', {query: searchTerm}], cb);//all?\n};\n\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/sessions.js":"//Sessions.js: Client for the zendesk API.\n\n\nvar util        = require('util'),\n    Client      = require('./client').Client;\n\n\nvar Sessions = exports.Sessions = function (options) {\n  this.jsonAPINames = [ 'sessions' ];\n  Client.call(this, options);\n};\n\n// Inherit from Client base object\nutil.inherits(Sessions, Client);\n\n// ######################################################## Sessions\n// ====================================== List Sessions\nSessions.prototype.get = function (cb) {\n  this.requestAll('GET', ['sessions'], cb);\n};\n\nSessions.prototype.getByUserId = function (userId, cb) {\n  this.requestAll('GET', ['users', userId, 'sessions'], cb);\n};\n\nSessions.prototype.getByUserIdBySessionId  = function (userId, sessionId, cb) {\n  this.request('GET', ['users', userId, 'sessions', sessionId], cb);\n};\n\nSessions.prototype.getMyAuthenticatedSession = function (cb) {\n  this.request('GET', ['users', 'me', 'session'], cb);\n};\n\nSessions.prototype.deleteByUserIdBySessionId = function (userId, sessionId, cb) {\n  this.request('DELETE', ['users', userId, 'sessions', sessionId], cb);\n};\n\nSessions.prototype.bulkDeleteByUserId = function (userId, cb) {\n  this.request('DELETE', ['users', userId, 'sessions'], cb);\n};\n\nSessions.prototype.logMeOut = function (cb) {\n  this.request('DELETE', ['users', 'me', 'sessions'], cb);\n};\n\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/sharingagreement.js":"//sharingAgreement.js: Client for the zendesk API.\n\n\nvar util        = require('util'),\n    Client      = require('./client').Client,\n    defaultgroups = require('./helpers').defaultgroups;\n\n\nvar SharingAgreement = exports.SharingAgreement = function (options) {\n  this.jsonAPINames = [ 'sharing-agreement' ];\n  Client.call(this, options);\n};\n\n// Inherit from Client base object\nutil.inherits(SharingAgreement, Client);\n\n// ######################################################## SharingAgreement\n// ====================================== Listing SharingAgreement\nSharingAgreement.prototype.show = function (cb) {\n  this.request('GET', ['sharing_agreements'], cb);\n};\n\n\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/suspendedtickets.js":"//SuspendedTickets.js: Client for the zendesk API.\n\n\nvar util        = require('util'),\n    Client      = require('./client').Client,\n    defaultgroups = require('./helpers').defaultgroups;\n\n\nvar SuspendedTickets = exports.SuspendedTickets = function (options) {\n  this.jsonAPINames = [ 'suspended_tickets', 'suspended_ticket' ];\n  Client.call(this, options);\n};\n\n// Inherit from Client base object\nutil.inherits(SuspendedTickets, Client);\n\n// ######################################################## SuspendedTickets\n// ====================================== Listing SuspendedTickets\nSuspendedTickets.prototype.list = function (cb) {\n  this.requestAll('GET', ['suspended_tickets'], cb);//all\n};\n\n\n// ====================================== Viewing SuspendedTickets\n\nSuspendedTickets.prototype.show = function (suspendedTicketID, cb) {\n  this.request('GET', ['suspended_tickets', suspendedTicketID], cb);\n};\n\n// ====================================== Recover SuspendedTickets\nSuspendedTickets.prototype.recover = function (suspendedTicketID, cb) {\n  this.request('PUT', ['suspended_tickets', suspendedTicketID, 'recover'], cb);\n};\n\nSuspendedTickets.prototype.recoverMany = function (suspendedTicketIDs, cb) {\n  this.request('PUT', ['suspended_tickets', 'recover_many', { ids: suspendedTicketIDs}], cb);\n};\n\n\n// ====================================== Deleting SuspendedTickets\nSuspendedTickets.prototype.delete = function (suspendedTicketID, cb) {\n  this.request('DELETE', ['suspended_tickets', suspendedTicketID],  cb);\n};\nSuspendedTickets.prototype.destroyMany = function (suspendedTicketIDs, cb) {\n  this.request('DELETE', ['suspended_tickets', 'destroy_many', { ids: suspendedTicketIDs}], cb);\n};\nSuspendedTickets.prototype.deleteMany = function (suspendedTicketIDs, cb) {\n  this.request('DELETE', ['suspended_tickets', 'destroy_many', { ids: suspendedTicketIDs}], cb);\n};\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/tags.js":"//Tags.js: Client for the zendesk API.\n\n\nvar util        = require('util'),\n    Client      = require('./client').Client,\n    defaultgroups = require('./helpers').defaultgroups;\n\n\nvar Tags = exports.Tags = function (options) {\n  this.jsonAPINames = [ 'tags' ];\n  Client.call(this, options);\n};\n\n// Inherit from Client base object\nutil.inherits(Tags, Client);\n\n// ######################################################## Tags\n// ====================================== Listing Tags\nTags.prototype.list = function (cb) {\n  this.requestAll('GET', ['tags'], cb);//all\n};\n\n\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/targets.js":"//targets.js: Client for the zendesk API.\n\nvar util        = require('util'),\n  Client      = require('./client').Client;\n\n\nvar Targets = exports.Targets = function (options) {\n  this.jsonAPINames = [ 'targets', 'target' ];\n  Client.call(this, options);\n};\n\n// Inherit from Client base object\nutil.inherits(Targets, Client);\n\n// ######################################################## Targets\n// ====================================== Listing Targets\nTargets.prototype.list = function (cb) {\n  this.requestAll('GET', ['targets'], cb);//all\n};\n\n// ====================================== Viewing Targets\nTargets.prototype.show = function (triggerID, cb) {\n  this.request('GET', ['targets', triggerID], cb);\n};\n\n// ====================================== Creating Targets\nTargets.prototype.create = function (target, cb) {\n  this.request('POST', ['targets'], target,  cb);\n};\n\n// ====================================== Updating Targets\nTargets.prototype.update = function (targetID, target, cb) {\n  this.request('PUT', ['targets', targetID], target,  cb);\n};\n\n// ====================================== Deleting Targets\nTargets.prototype.delete = function (targetID, cb) {\n  this.request('DELETE', ['targets', targetID],  cb);\n};","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/ticketaudits.js":"//TicketAudits.js: Client for the zendesk API.\n\n\nvar util        = require('util'),\n    Client      = require('./client').Client,\n    defaultgroups = require('./helpers').defaultgroups;\n\n\nvar TicketAudits = exports.TicketAudits = function (options) {\n  this.jsonAPINames = [ 'audits', 'audit' ];\n  this.sideLoadMap = [\n    { field: 'author_id', name: 'author', dataset: 'users'},\n    { field: 'ticket_id', name: 'ticket', dataset: 'tickets' }\n  ];\n  Client.call(this, options);\n};\n\n// Inherit from Client base object\nutil.inherits(TicketAudits, Client);\n\n// ######################################################## TicketAudits\n// ====================================== Listing TicketAudits\nTicketAudits.prototype.list = function (ticketID, cb) {\n  this.requestAll('GET', ['tickets', ticketID, 'audits'], cb);//all?\n};\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/ticketevents.js":"//TicketEvents.js: Client for the zendesk API.\n\n\nvar util        = require('util'),\n    Client      = require('./client').Client,\n    defaultgroups = require('./helpers').defaultgroups;\n\n\nvar TicketEvents = exports.TicketEvents = function (options) {\n  this.jsonAPINames = [ 'ticket_events', 'ticket_event' ];\n  Client.call(this, options);\n};\n\n// Inherit from Client base object\nutil.inherits(TicketEvents, Client);\n\n// ######################################################## TicketEvents\n\n//  ====================================== New Incremental TicketEvents Export with include\nTicketEvents.prototype.incrementalInclude = function (startTime, include, cb) {\n  this.request('GET', ['incremental', 'ticket_events', {start_time: startTime, include: include}],  cb);\n};\n\n//  ====================================== New Incremental Ticket Export\nTicketEvents.prototype.incremental = function (startTime, cb) {\n  this.request('GET', ['incremental', 'ticket_events', {start_time: startTime}],  cb);\n};\n//  ====================================== New Incremental Ticket Export Sample\nTicketEvents.prototype.incrementalSample = function (startTime, cb) {\n  this.request('GET', ['incremental', 'ticket_events', 'sample', {start_time: startTime}],  cb);\n};\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/ticketexport.js":"//tickets.js: Client for the zendesk API.\n\n\nvar util        = require('util'),\n    Client      = require('./client').Client,\n    defaultUser = require('./helpers').defaultUser;\n\n\nvar TicketExport = exports.TicketExport = function (options) {\n  this.jsonAPINames = [ 'exports', 'export', 'audits' ];\n  Client.call(this, options);\n};\n\n// Inherit from Client base object\nutil.inherits(TicketExport, Client);\n\n// ######################################################## TicketsImport\n\n\n// ====================================== Creating Tickets\nTicketExport.prototype.export = function (start_time, cb) {\n  this.request('GET', ['incremental', 'tickets', '?start_time='+start_time], cb);\n};\n\nTicketExport.prototype.exportWithUser = function (start_time, cb) {\n  this.request('GET', ['incremental', 'tickets', '?start_time='+start_time+'&include=users,groups'], cb);\n};\n\n// ######################################################## Ticket Audits\n\n// ====================================== Listing Audits\nTicketExport.prototype.exportAudit = function (ticketID, cb) {\n  this.requestAll('GET', ['tickets', ticketID, 'audits'],  cb);\n};\n\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/ticketfields.js":"//ticketfields.js: Client for the zendesk API.\n\n\nvar util        = require('util'),\n    Client      = require('./client').Client,\n    defaultUser = require('./helpers').defaultUser;\n\n\nvar TicketFields = exports.TicketFields = function (options) {\n  this.jsonAPINames = [ 'ticket_fields', 'ticket_field' ];\n  Client.call(this, options);\n};\n\n// Inherit from Client base object\nutil.inherits(TicketFields, Client);\n\n// ######################################################## Ticket Fields\n// ====================================== Listing Tickets Fields\nTicketFields.prototype.list = function (cb) {\n  this.requestAll('GET', ['ticket_fields'], cb);//all\n};\n\n\n// ====================================== Viewing Tickets Fields\nTicketFields.prototype.show = function (ticketFieldID, cb) {\n  this.request('GET', ['ticket_fields', ticketFieldID], cb);\n};\n\n// ====================================== Creating Tickets Fields\nTicketFields.prototype.create = function (ticketField, cb) {\n  this.request('POST', ['ticket_fields'], ticketField,  cb);\n};\n\n// ====================================== Updating Tickets Fields\nTicketFields.prototype.update = function (ticketFieldID, ticketField, cb) {\n  this.request('PUT', ['ticket_fields', ticketFieldID], ticketField,  cb);\n};\n\n// ====================================== Deleting Tickets Fields\nTicketFields.prototype.delete = function (ticketFieldID, cb) {\n  this.request('DELETE', ['ticket_fields', ticketFieldID],  cb);\n};\n\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/ticketimport.js":"//tickets.js: Client for the zendesk API.\n\n\nvar util        = require('util'),\n    Client      = require('./client').Client,\n    defaultUser = require('./helpers').defaultUser;\n\n\nvar TicketImport = exports.TicketImport = function (options) {\n  this.jsonAPINames = [ 'imports', 'import' ];\n  Client.call(this, options);\n};\n\n// Inherit from Client base object\nutil.inherits(TicketImport, Client);\n\n// ######################################################## TicketsImport\n\n\n// ====================================== Creating Tickets\nTicketImport.prototype.import = function (ticket, cb) {\n  this.request('POST', ['imports/tickets'], ticket,  cb);\n};\n\n\n// ######################################################## Ticket Audits\n\n// ====================================== Listing Audits\nTicketImport.prototype.exportAudit = function (ticketID, cb) {\n  this.requestAll('GET', ['tickets', ticketID, 'audits'],  cb);\n};\n\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/ticketmetrics.js":"//ticketmetrics.js: Client for the zendesk API.\n\n\nvar util        = require('util'),\n    Client      = require('./client').Client,\n    defaultUser = require('./helpers').defaultUser;\n\nvar TicketMetrics = exports.TicketMetrics = function (options) {\n    this.jsonAPINames = [ 'ticket_metrics', 'ticket_metric' ];\n    Client.call(this, options);\n};\n\n// Inherit from Client base object\nutil.inherits(TicketMetrics, Client);\n\n// ######################################################## TicketMetrics\n// ====================================== Listing TicketMetrics for ticket\nTicketMetrics.prototype.list = function (ticketID, cb) {\n    this.request('GET', ['tickets', ticketID, 'metrics'],  cb);//all for ticket\n};\n\n// ====================================== Listing ALL TicketMetrics\nTicketMetrics.prototype.listAll = function (cb) {\n    this.requestAll('GET', ['ticket_metrics'], cb); //all metrics for all tickets\n};\n\n\n// ====================================== Viewing A Single TicketMetric\nTicketMetrics.prototype.show = function (ticketMetricId, cb) {\n    this.request('GET', ['ticket_metrics', ticketMetricId], cb);  //get by ticket metric id\n};\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/tickets.js":"//tickets.js: Client for the zendesk API.\n\n\nvar util        = require('util'),\n    Client      = require('./client').Client,\n    defaultUser = require('./helpers').defaultUser;\n\n\nvar Tickets = exports.Tickets = function (options) {\n  this.jsonAPINames = ['tickets', 'ticket', 'audits'];\n  this.sideLoadMap = [\n    { field: 'assignee_id',     name: 'assignee',     dataset: 'users'},\n    { field: 'requester_id',    name: 'requester',    dataset: 'users'},\n    { field: 'submitter_id',    name: 'submitter',    dataset: 'users'},\n    { field: 'organization_id', name: 'organization', dataset: 'organizations'},\n    { field: 'id',              name: 'sharing_agreements',    dataset: 'sharing_agreements'},\n  ];\n  Client.call(this, options);\n};\n\n// Inherit from Client base object\nutil.inherits(Tickets, Client);\n\n// ######################################################## Tickets\n// ====================================== Listing Tickets\nTickets.prototype.list = function (cb) {\n  this.requestAll('GET', ['tickets'], cb);//all\n};\n\nTickets.prototype.listByOrganization = function (orgID, cb) {\n  this.requestAll('GET', ['organizations', orgID, 'tickets'], cb);//all\n};\n\nTickets.prototype.listByUserRequested = function (userID, cb) {\n  this.requestAll('GET', ['users', userID, 'tickets', 'requested'], cb);//all\n};\n\nTickets.prototype.listByUserCCD = function (userID, cb) {\n  this.requestAll('GET', ['users', userID, 'tickets', 'ccd'], cb);//all\n};\n\nTickets.prototype.listWithFilter = function (type, value, cb) {\n  this.requestAll('GET', ['tickets', {type: value}], cb);\n};\n\nTickets.prototype.listRecent = function (cb) {\n  this.requestAll('GET', ['tickets', 'recent'], cb);//all?\n};\n\nTickets.prototype.listCollaborators = function (ticketID, cb) {\n  this.requestAll('GET', ['tickets', ticketID, 'collaborators'],  cb);//all?\n};\n\nTickets.prototype.listIncidents = function (ticketID, cb) {\n  this.requestAll('GET', ['tickets', ticketID, 'incidents'],  cb);//all\n};\n\nTickets.prototype.listMetrics = function (ticketID, cb) {\n  this.request('GET', ['tickets', ticketID, 'metrics'],  cb);//all\n};\n\n// ====================================== Viewing Tickets\nTickets.prototype.show = function (ticketID, cb) {\n  this.request('GET', ['tickets', ticketID], cb);\n};\n\nTickets.prototype.showMany = function (ticket_ids, cb) {\n  this.request('GET', ['tickets', 'show_many', '?ids=' + ticket_ids.toString()], cb);\n};\n\n// ====================================== Creating Tickets\nTickets.prototype.create = function (ticket, cb) {\n  this.request('POST', ['tickets'], ticket,  cb);\n};\n\n// ====================================== Updating Tickets\nTickets.prototype.update = function (ticketID, ticket, cb) {\n  this.request('PUT', ['tickets', ticketID], ticket,  cb);\n};\n\nTickets.prototype.updateMany = function (ticket_ids, ticket, cb) {\n  this.request('PUT', ['tickets', 'update_many', '?ids=' + ticket_ids.toString()], ticket,  cb);\n};\n\n// ====================================== Deleting Tickets\nTickets.prototype.delete = function (ticketID, cb) {\n  this.request('DELETE', ['tickets', ticketID],  cb);\n};\n\nTickets.prototype.deleteMany = function (ticket_ids, cb) {\n  this.request('DELETE', ['tickets', 'destroy_many', '?ids=' + ticket_ids.toString()],  cb);\n};\n\n// ====================================== Merging tickets\nTickets.prototype.merge = function (ticketID, mergedTicket, cb) {\n  this.request('POST', ['tickets', ticketID, 'merge'], mergedTicket, cb);\n};\n\n// ######################################################## Ticket export (max 1000 tickets per request in 5 min intrvals)\n// ====================================== Ticket Export\nTickets.prototype.export = function (startTime, cb) {\n  this.request('GET', ['exports', 'tickets', {start_time: startTime}],  cb);\n};\n\n// ====================================== Ticket Export Sample (max 50 tickets per request)\nTickets.prototype.exportSample = function (startTime, options) {\n  this.request('GET', ['exports', 'tickets', 'sample', {start_time: startTime}],  cb);\n};\n\n//  ====================================== New Incremental Ticket Export\nTickets.prototype.incremental = function (startTime, cb) {\n  this.request('GET', ['incremental', 'tickets', {start_time: startTime}],  cb);\n};\n\n//  ====================================== New Incremental Ticket Export with include\nTickets.prototype.incrementalInclude = function (startTime, include, cb) {\n  this.request('GET', ['incremental', 'tickets', {start_time: startTime, include: include}],  cb);\n};\n\n//  ====================================== New Incremental Ticket Export Sample\nTickets.prototype.incrementalSample = function (startTime, cb) {\n  this.request('GET', ['incremental', 'tickets', 'sample', {start_time: startTime}],  cb);\n};\n\n// ====================================== Listing Ticket Comments\nTickets.prototype.getComments = function (ticketID, cb) {\n\tthis.requestAll('GET', ['tickets', ticketID, 'comments'],  cb);\n};\n\n// ######################################################## Ticket Audits\n\n// ====================================== Listing Audits\nTickets.prototype.exportAudit = function (ticketID, cb) {\n  this.requestAll('GET', ['tickets', ticketID, 'audits'],  cb);\n};\n\n// ######################################################## Ticket Tags\n\n// ====================================== Add Tags to Ticket\nTickets.prototype.addTags = function (ticketID, tags, cb) {\n  this.requestAll('PUT', ['tickets', ticketID, 'tags'], tags, cb);\n};\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/topiccomments.js":"//TopicComments.js: Client for the zendesk API.\n\n\nvar util        = require('util'),\n    Client      = require('./client').Client,\n    defaultgroups = require('./helpers').defaultgroups;\n\n\nvar TopicComments = exports.TopicComments = function (options) {\n  this.jsonAPINames = [ 'topic_comments', 'topic_comment'];\n  this.sideLoadMap = [\n    { field: 'user_id', name: 'user', dataset: 'users'}\n  ];\n\n  Client.call(this, options);\n};\n\n// Inherit from Client base object\nutil.inherits(TopicComments, Client);\n\n// ######################################################## TopicComments\n// ====================================== Listing TopicComments\nTopicComments.prototype.list = function (topicID, cb) {\n  this.requestAll('GET', ['topics', topicID, 'comments'], cb);//all\n};\n\nTopicComments.prototype.listByUser = function (userID, cb) {\n  this.requestAll('GET', ['users', userID, 'topic_comments'], cb);//all\n};\n\n\n// ====================================== Viewing TopicComments\n\nTopicComments.prototype.show = function (topicID, commentID, cb) {\n  this.request('GET', ['topics', topicID, 'comments', commentID], cb);\n};\n\nTopicComments.prototype.showByUser = function (userID, commentID, cb) {\n  this.request('GET', ['users', userID, 'topic_comments', commentID], cb);\n};\n\n// ====================================== Creating TopicComments\nTopicComments.prototype.create = function (topicID, comment, cb) {\n  this.request('POST', ['topics', topicID, 'comments'], comment, cb);\n};\n\n// ====================================== Updating TopicComments\n\nTopicComments.prototype.update = function (topicID, commentID, comment, cb) {\n  this.request('PUT', ['topics', topicID, 'comments', commentID], comment, cb);\n};\n\n\n// ====================================== Deleting TopicComments\nTopicComments.prototype.delete = function (topicID, commentID, cb) {\n  this.request('DELETE', ['topics', topicID, 'comments', commentID], cb);\n};\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/topics.js":"//Topics.js: Client for the zendesk API.\n\n\nvar util        = require('util'),\n    Client      = require('./client').Client,\n    defaultgroups = require('./helpers').defaultgroups;\n\n\nvar Topics = exports.Topics = function (options) {\n  this.jsonAPINames = [ 'topics', 'topic' ];\n  this.sideLoadMap = [\n    { field: 'updater_id',      name: 'updater',      dataset: 'users'},\n    { field: 'submitter_id',    name: 'submitter',    dataset: 'users'},\n    { field: 'forum_id',        name: 'forum',        dataset: 'forums'}\n  ];\n  Client.call(this, options);\n};\n\n// Inherit from Client base object\nutil.inherits(Topics, Client);\n\n// ######################################################## Topics\n// ====================================== Listing Topics\nTopics.prototype.list = function (cb) {\n  this.requestAll('GET', ['topics'], cb);//all\n};\n\nTopics.prototype.listByForum = function (forumID, cb) {\n  this.requestAll('GET', ['forums', forumID, 'topics'], cb);//all\n};\n\nTopics.prototype.listByUser = function (userID, cb) {\n  this.requestAll('GET', ['users', userID, 'topics'], cb);//all\n};\n\n\n// ====================================== Viewing Topics\n\nTopics.prototype.show = function (topicID, cb) {\n  this.request('GET', ['topics', topicID], cb);\n};\n\nTopics.prototype.showMany = function (topicIDs, cb) {\n  this.request('GET', ['topics', 'show_many', {ids: topicIDs}], cb);\n};\n\n// ====================================== Creating Topics\nTopics.prototype.create = function (topic, cb) {\n  this.request('POST', ['topics'], topic, cb);\n};\n\n// ====================================== Updating Topics\n\nTopics.prototype.update = function (topicID, topic, cb) {\n  this.request('PUT', ['topics', topicID], topic, cb);\n};\n\n\n// ====================================== Deleting Topics\nTopics.prototype.delete = function (topicID, cb) {\n  this.request('DELETE', ['topics', topicID],  cb);\n};\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/topicsubscriptions.js":"//TopicSubscriptions.js: Client for the zendesk API.\n\n\nvar util        = require('util'),\n    Client      = require('./client').Client,\n    defaultgroups = require('./helpers').defaultgroups;\n\n\nvar TopicSubscriptions = exports.TopicSubscriptions = function (options) {\n  this.jsonAPINames = [ 'topic_subscriptions', 'topic_subscription' ];\n  Client.call(this, options);\n};\n\n// Inherit from Client base object\nutil.inherits(TopicSubscriptions, Client);\n\n// ######################################################## TopicSubscriptions\n// ====================================== Listing TopicSubscriptions\nTopicSubscriptions.prototype.list = function (cb) {\n  this.requestAll('GET', ['topic_subscriptions'], cb);//all\n};\nTopicSubscriptions.prototype.listByTopic = function (topicID, cb) {\n  this.requestAll('GET', ['topic', topicID, 'subscriptions'], cb);//all\n};\n\n\n\n// ====================================== Viewing TopicSubscriptions\n\nTopicSubscriptions.prototype.show = function (topicSubscriptionsID, cb) {\n  this.request('GET', ['topic_subscriptions', topicSubscriptionsID], cb);\n};\n\n// ====================================== Creating TopicSubscriptions\nTopicSubscriptions.prototype.create = function (topicSubscription, cb) {\n  this.request('POST', ['topic_subscriptions'], topicSubscription, cb);\n};\n\n\n// ====================================== Deleting TopicSubscriptions\nTopicSubscriptions.prototype.delete = function (topicSubscriptionsID, cb) {\n  this.request('DELETE', ['topic_subscriptions', topicSubscriptionsID],  cb);\n};\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/topicvotes.js":"//TopicVotes.js: Client for the zendesk API.\n\n\nvar util        = require('util'),\n    Client      = require('./client').Client,\n    defaultgroups = require('./helpers').defaultgroups;\n\n\nvar TopicVotes = exports.TopicVotes = function (options) {\n  this.jsonAPINames = [ 'topic_votes', 'topic_vote' ];\n  Client.call(this, options);\n};\n\n// Inherit from Client base object\nutil.inherits(TopicVotes, Client);\n\n// ######################################################## TopicVotes\n// ====================================== Listing TopicVotes\nTopicVotes.prototype.list = function (topicID, cb) {\n  this.requestAll('GET', ['topics', topicID, 'votes'], cb);//all\n};\n\nTopicVotes.prototype.listByUser = function (userID, cb) {\n  this.requestAll('GET', ['users', userID, 'topic_votes'], cb);//all\n};\n\n\n// ====================================== Viewing TopicVotes\n\nTopicVotes.prototype.show = function (topicID, cb) {\n  this.request('GET', ['topics', topicID, 'vote'], cb);//all\n};\n\n\n// ====================================== Creating TopicVotes\nTopicVotes.prototype.create = function (topicID, vote, cb) {\n  this.request('POST', ['topics', topicID, 'vote'], vote, cb);\n};\n\n\n\n// ====================================== Deleting TopicVotes\nTopicVotes.prototype.delete = function (topicID, cb) {\n  this.request('DELETE', ['topics', topicID, 'vote'], cb);\n};\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/triggers.js":"//triggers.js: Client for the zendesk API.\n\n\nvar util        = require('util'),\n    Client      = require('./client').Client,\n    defaultUser = require('./helpers').defaultUser;\n\n\nvar Triggers = exports.Triggers = function (options) {\n  this.jsonAPINames = [ 'triggers', 'trigger' ];\n  Client.call(this, options);\n};\n\n// Inherit from Client base object\nutil.inherits(Triggers, Client);\n\n// ######################################################## Triggers\n// ====================================== Listing Triggers\nTriggers.prototype.list = function (cb) {\n  this.requestAll('GET', ['triggers'], cb);//all\n};\n\nTriggers.prototype.listActive = function (triggerID, cb) {\n  this.requestAll('GET', ['triggers', 'active'],  cb);//all?\n};\n\n// ====================================== Viewing Triggers\nTriggers.prototype.show = function (triggerID, cb) {\n  this.request('GET', ['triggers', triggerID], cb);\n};\n\n// ====================================== Creating Triggers\nTriggers.prototype.create = function (trigger, cb) {\n  this.request('POST', ['triggers'], trigger,  cb);\n};\n\n// ====================================== Updating Triggers\nTriggers.prototype.update = function (triggerID, trigger, cb) {\n  this.request('PUT', ['triggers', triggerID], trigger,  cb);\n};\n\n// ====================================== Deleting Triggers\nTriggers.prototype.delete = function (triggerID, cb) {\n  this.request('DELETE', ['triggers', triggerID],  cb);\n};\n\n// ====================================== Reorder Audits\nTriggers.prototype.reorder = function (triggerIDs, cb) {\n  this.requestAll('PUT', ['triggers', 'reorder'], {trigger_ids: triggerIDs}, cb);\n};\n\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/userfields.js":"//userfields.js: Client for the zendesk API.\n\n\nvar util        = require('util'),\n    Client      = require('./client').Client,\n    defaultUser = require('./helpers').defaultUser;\n\n\nvar UserFields = exports.UserFields = function (options) {\n  this.jsonAPINames = [ 'user_fields', 'user_field' ];\n  Client.call(this, options);\n};\n\n// Inherit from Client base object\nutil.inherits(UserFields, Client);\n\n// ######################################################## UserFields\n// ====================================== Listing UserFields\nUserFields.prototype.list = function (cb) {\n  this.requestAll('GET', ['user_fields'], cb);//all\n};\n\n\n// ====================================== Viewing UserFields\nUserFields.prototype.show = function (userFieldID, cb) {\n  this.request('GET', ['user_fields', userFieldID], cb);\n};\n\n// ====================================== Creating UserFields\nUserFields.prototype.create = function (userField, cb) {\n  this.request('POST', ['user_fields'], userField, cb);\n};\n\n// ====================================== Updating UserFields\nUserFields.prototype.update = function (userFieldID, userField, cb) {\n  this.request('PUT', ['user_fields', userFieldID], userField, cb);\n};\n\n// ====================================== Deleting UserFields\nUserFields.prototype.delete = function (userFieldID, cb) {\n  this.request('DELETE', ['user_fields', userFieldID],  cb);\n};\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/useridentities.js":"//UserIdentities.js: Client for the zendesk API.\n\n\nvar util        = require('util'),\n    Client      = require('./client').Client,\n    defaultUser = require('./helpers').defaultUser;\n\n\nvar UserIdentities = exports.UserIdentities = function (options) {\n  this.jsonAPINames = [ 'identities', 'identity' ];\n  Client.call(this, options);\n};\n\n// Inherit from Client base object\nutil.inherits(UserIdentities, Client);\n\n// ######################################################## UserIdentities\n// ====================================== Listing UserIdentities\nUserIdentities.prototype.list = function (userID, cb) {\n  this.requestAll('GET', ['users', userID, 'identities'], cb);//all\n};\n\n\n// ====================================== Viewing UserIdentities\nUserIdentities.prototype.show = function (userID, userIDentityID, cb) {\n  this.request('GET', ['users', userID, 'identities', userIDentityID], cb);\n};\n\n// ====================================== Creating UserIdentities\nUserIdentities.prototype.create = function (userID, userIDentity, cb) {\n  if (\n    userIDentity && typeof userIDentity === \"object\" &&\n    !Array.isArray(userIDentity) &&\n    !userIDentity.hasOwnProperty(\"identity\")\n  ) {\n    userIDentity = {\"identity\": userIDentity};\n  }\n  this.request('POST', ['users', userID, 'identities'], userIDentity, cb);\n};\n\n// ====================================== Updating UserIdentities\n\nUserIdentities.prototype.update = function (userID, userIDentityID, cb) {\n  this.request('PUT', ['users', userID, 'identities', userIDentityID], {\"identity\": {\"verified\": true}}, cb);\n};\n\nUserIdentities.prototype.makePrimary = function (userID, userIDentityID,  cb) {\n  this.request('PUT', ['users', userID, 'identities', userIDentityID, \"make_primary\"],   cb);\n};\n\nUserIdentities.prototype.verify = function (userID, userIDentityID, cb) {\n  this.request('PUT', ['users', userID, 'identities', userIDentityID, 'verify'],   cb);\n};\n\nUserIdentities.prototype.requestVerification = function (userID, userIDentityID, cb) {\n  this.request('PUT', ['users', userID, 'identities', userIDentityID, 'request_verification'],   cb);\n};\n\n// ====================================== Deleting UserIdentities\nUserIdentities.prototype.delete = function (userID, userIDentityID, cb) {\n  this.request('DELETE', ['users', userID, 'identities', userIDentityID],  cb);\n};\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/users.js":"//users.js: Client for the zendesk API.\n\n\nvar util        = require('util'),\n    Client      = require('./client').Client,\n    defaultUser = require('./helpers').defaultUser;\n\n\nvar Users = exports.Users = function (options) {\n  this.jsonAPINames = ['users', 'user'];\n  this.sideLoadMap = [\n    { field: 'id',              name: 'group',       dataset: 'groups',      all: true },\n    { field: 'id',              name: 'identity',   dataset: 'identities',  array: true,    dataKey: 'user_id' },\n    { field: 'custom_role_id',  name: 'role',         dataset: 'roles'},\n    { field: 'organization_id', name: 'organization', dataset: 'organizations'}\n  ];\n  Client.call(this, options);\n};\n\n// Inherit from Client base object\nutil.inherits(Users, Client);\n\n\nUsers.prototype.auth = function (cb) {\n  this.request('GET', ['users', 'me'], cb);\n};\n\n\nUsers.prototype.list = function (cb) {\n  this.requestAll('GET', ['users'], cb);\n};\n\n\nUsers.prototype.listByGroup = function (id, cb) {\n  this.requestAll('GET', ['groups', id, 'users'], cb);\n};\n\n\nUsers.prototype.listByOrganization = function (id, cb) {\n  this.requestAll('GET', ['organizations', id, 'users'], cb);\n};\n\n\nUsers.prototype.show = function (id, cb) {\n  this.request('GET', ['users', id], cb);\n};\n\n\nUsers.prototype.showMany = function (user_ids, cb) {\n  this.request('GET', ['users', 'show_many', '?ids=' + user_ids.toString()], cb);\n};\n\n\nUsers.prototype.create = function (user, cb) {\n  this.request('POST', ['users'], user, cb);\n};\n\n\nUsers.prototype.createMany = function (users, cb) {\n  this.request('POST', ['users', 'create_many'], users, cb);\n};\n\nUsers.prototype.createOrUpdate = function (user, cb) {\n  this.request('POST', ['users', 'create_or_update'], user, cb);\n};\n\n\nUsers.prototype.createOrUpdateMany = function (users, cb) {\n  this.request('POST', ['users', 'create_or_update_many'], users, cb);\n};\n\nUsers.prototype.update = function (id, user, cb) {\n  this.request('PUT', ['users', id], user, cb);\n};\n\nUsers.prototype.updateMany = function (/*Optional*/ids, users, cb) {\n  var args = Array.prototype.slice.call(arguments);\n  if(args.length == 2){\n    cb = users;\n    users = ids;\n    this.request('PUT', ['users', 'update_many'], users, cb);\n  } else if (!ids){\n    this.request('PUT', ['users', 'update_many'], users, cb);\n  } else if(typeof ids === 'string') {\n    this.request('PUT', ['users', 'update_many', '?ids=' + ids.toString()], users, cb);\n  } else if(typeof ids === 'object'){\n    if(Array.isArray(ids)) {\n      this.request('PUT', ['users', 'update_many', '?ids=' + ids.join(',')], users, cb);\n    }\n    else if(ids.hasOwnProperty('ids')){\n      this.request('PUT', ['users', 'update_many', '?ids=' + ids.ids.toString()], users, cb);\n    }\n    else if(ids.hasOwnProperty('external_ids')){\n      this.request('PUT', ['users', 'update_many', '?external_ids=' + ids.external_ids.toString()], users, cb);\n    }\n  }\n};\n\nUsers.prototype.suspend = function (id, cb) {\n  this.request('PUT', ['users', id], {\"user\": {\"suspended\": true} }, cb);\n};\n\nUsers.prototype.unsuspend = function (id, cb) {\n  this.request('PUT', ['users', id], {\"user\": {\"suspended\": false} }, cb);\n};\n\nUsers.prototype.delete = function (id, cb) {\n  this.request('DELETE', ['users', id], cb);\n};\n\nUsers.prototype.search = function (params, cb) {\n  this.requestAll('GET', ['users', 'search', params], cb);\n};\n\nUsers.prototype.me = function (cb) {\n  this.request('GET', ['users', 'me'], cb);\n};\n\nUsers.prototype.merge = function (id, targetId, cb) {\n  this.request('PUT', ['users', id, 'merge'], {\"user\": {\"id\": targetId} }, cb);\n};\n\n//  ====================================== New Incremental Users Export with include\nUsers.prototype.incrementalInclude = function (startTime, include, cb) {\n  this.request('GET', ['incremental', 'users', {start_time: startTime, include: include}],  cb);\n};\n\n//  ====================================== New Incremental Users Export\nUsers.prototype.incremental = function (startTime, cb) {\n  this.request('GET', ['incremental', 'users', {start_time: startTime}],  cb);\n};\n//  ====================================== New Incremental Users Export Sample\nUsers.prototype.incrementalSample = function (startTime, cb) {\n  this.request('GET', ['incremental', 'users', 'sample', {start_time: startTime}],  cb);\n};\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/views.js":"//Views.js: Client for the zendesk API.\n\n\nvar util        = require('util'),\n    Client      = require('./client').Client,\n    defaultUser = require('./helpers').defaultUser;\n\n\nvar Views = exports.Views = function (options) {\n  this.jsonAPINames = [ 'views', 'view' ];\n  Client.call(this, options);\n};\n\n// Inherit from Client base object\nutil.inherits(Views, Client);\n\n// ######################################################## Views\n// ====================================== Listing Views\nViews.prototype.list = function (cb) {\n  this.requestAll('GET', ['views'], cb);//all\n};\n\n// ====================================== Listing Active Views\nViews.prototype.listActive = function (cb) {\n  this.requestAll('GET', ['views', 'active'], cb);//all\n};\n\n// GET /api/v2/views/compact.json\n// A compacted list of shared and personal views available to the current user\nViews.prototype.listCompact = function (cb) {\n  this.requestAll('GET', ['views', 'compact'], cb);//all\n};\n\n// ====================================== Viewing Views\nViews.prototype.show = function (viewID, cb) {\n  this.request('GET', ['views', viewID], cb);\n};\n\n// Create View\n// POST /api/v2/views.json\nViews.prototype.create = function (view, cb) {\n  this.request('POST', ['views'], view, cb);\n};\n\n// Update View\n// PUT /api/v2/views/{id}.json\nViews.prototype.update = function (viewID, viewData, cb) {\n  this.request('PUT', ['views', viewID], viewData, cb);\n};\n\n// Executing Views\n// GET /api/v2/views/{id}/execute.json\n// :params can be http://developer.zendesk.com/documentation/rest_api/views.html#previewing-views\nViews.prototype.execute = function (viewID, params, cb) {\n  this.requestAll('GET', ['views', viewID, 'execute', params], cb);\n};\n\n// Getting Tickets from a view\n// GET /api/v2/views/{id}/tickets.json\nViews.prototype.tickets = function (viewID, cb) {\n  this.requestAll('GET', ['views', viewID, 'tickets'], cb);\n};\n\n// Previewing Views\n// POST /api/v2/views/preview.json\n// :params can be http://developer.zendesk.com/documentation/rest_api/views.html#previewing-views\nViews.prototype.preview = function (params, cb) {\n  this.requestAll('POST', ['views', 'preview'], params, cb);\n};\n\nViews.prototype.showCount = function (viewID, cb) {\n  this.request('GET', ['views', viewID, 'count'], cb);\n};\n\nViews.prototype.showCounts = function (viewIDs, cb) {\n  this.request('GET', ['views', 'count_many', {ids: viewIDs}], cb);\n};\n\n// Exporting Views\n// GET /api/v2/views/{id}/export.json\nViews.prototype.export = function (viewID, cb) {\n  this.request('GET', ['views', viewID, 'export'], cb);\n};\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/helpcenter/accesspolicies.js":"//AccessPolicies.js: Client for the zendesk help center API.\n\n\nvar util        = require('util'),\n  Client      = require('../client').Client\n//defaultgroups = require('./helpers').defaultgroups;\n\n\nvar AccessPolicies = exports.AccessPolicies = function (options) {\n  this.jsonAPINames = [ 'accesspplicies', 'accesspolicy' ];\n  Client.call(this, options);\n};\n\n// Inherit from Client base object\nutil.inherits(AccessPolicies, Client);\n\n// ######################################################## AccessPolicies\n// ====================================== Showing Access Policies\nAccessPolicies.prototype.show = function (sectionID, cb) {\n  this.request('GET', ['sections', sectionID, 'access_policy'], cb);\n};\n\n// ====================================== Updating Access Policies\nAccessPolicies.prototype.update = function (sectionID, accessPolicy, cb) {\n  this.request('PUT', ['sections', sectionID, 'access_policy'], accessPolicy, cb);\n};\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/helpcenter/articleattachments.js":"//ArticleAttachments.js: Client for the zendesk help center API.\n\n\nvar util        = require('util'),\n  Client      = require('../client').Client\n//defaultgroups = require('./helpers').defaultgroups;\n\n\nvar ArticleAttachments = exports.ArticleAttachments = function (options) {\n  this.jsonAPINames = [ 'articleattachments', 'articleattachment'];\n  Client.call(this, options);\n};\n\n// Inherit from Client base object\nutil.inherits(ArticleAttachments, Client);\n\n// ######################################################## Article Attachments\n// ====================================== Listing Article Attachments\nArticleAttachments.prototype.list = function (articleID, cb) {\n  this.request('GET', ['articles', articleID, 'attachments'], cb);//all\n};\n\n// ====================================== Listing Article Inline Attachments\nArticleAttachments.prototype.listInline = function (articleID, cb) {\n  this.request('GET', ['articles', articleID, 'attachments', 'inline'], cb);//all\n};\n\n// ====================================== Listing Article Block Attachments\nArticleAttachments.prototype.listBlock = function (articleID, cb) {\n  this.request('GET', ['articles', articleID, 'attachments', 'block'], cb);//all\n};\n\n// ====================================== Showing Article Attachments\nArticleAttachments.prototype.show = function (attachmentID, cb) {\n  this.request('GET', ['articles', 'attachments', attachmentID], cb);\n};\n\n// ====================================== Creating Article Attachments\nArticleAttachments.prototype.create = function (articleID, cb) {\n  cb('not implemented');\n};\n\n// ====================================== Creating Unassociated Article Attachments\nArticleAttachments.prototype.createUnassociated = function (articleID, cb) {\n  cb('not implemented');\n};\n\n// ====================================== Deleting Article Attachments\nArticleAttachments.prototype.delete = function (attachmentID, cb) {\n  this.request('DELETE', ['articles', 'attachments', attachmentID], cb);\n};\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/helpcenter/articlecomments.js":"//ArticleComment.js: Client for the zendesk help center API.\n\n\nvar util        = require('util'),\n    Client      = require('../client').Client\n\nvar ArticleComments = exports.ArticleComments = function (options) {\n  this.jsonAPINames = [ 'articlecomments', 'articlecomment' ];\n  this.sideLoadMap = [\n    { field: 'author_id', name: 'user', dataset: 'users' }\n  ];\n  Client.call(this, options);\n};\n\n// Inherit from Client base object\nutil.inherits(ArticleComments, Client);\n\n// ######################################################## Article Comments\n\n// ====================================== Listing Article Comments by UserID\nArticleComments.prototype.listByUser = function (userID, cb) {\n  this.requestAll('GET', ['users', userID, 'comments'], cb);//all\n};\n\n// ====================================== Listing Article Comments by ArticleID\nArticleComments.prototype.listByArticle = function (articleID, cb) {\n  this.requestAll('GET', ['articles', articleID, 'comments'], cb);//all\n};\n\n// ====================================== Showing an Article Comment\nArticleComments.prototype.show = function (articleID, commentID, cb) {\n  this.request('GET', ['articles', articleID, 'comments', commentID], cb);\n};\n\n// ====================================== Creating an Article Comment\nArticleComments.prototype.create = function (articleID, comment, cb) {\n  this.request('POST', ['articles', articleID, 'comments'], comment, cb);\n};\n\n// ====================================== Updating an Article Comment\nArticleComments.prototype.update = function (articleID, commentID, comment, cb) {\n  this.request('PUT', ['articles', articleID, 'comments', commentID], comment, cb);\n};\n\n// ====================================== Deleting an Article Comment\nArticleComments.prototype.delete = function (articleID, commentID, cb) {\n  this.request('DELETE', ['articles', articleID, 'comments', commentID], cb);\n};\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/helpcenter/articlelabels.js":"//ArticleLabels.js: Client for the zendesk help center API.\n\n\nvar util        = require('util'),\n  Client      = require('../client').Client\n\nvar ArticleLabels = exports.ArticleLabels = function (options) {\n  this.jsonAPINames = [ 'articlelabels', 'articlelabel' ];\n  Client.call(this, options);\n};\n\n// Inherit from Client base object\nutil.inherits(ArticleLabels, Client);\n\n// ######################################################## Article Labels\n\n// ====================================== Listing Article Labels\nArticleLabels.prototype.list = function (cb) {\n  //We do not need requestAll as the response body is within the field \"labels\" : []\n  this.request('GET', ['articles', 'labels'], cb);\n};\n\n// ====================================== Listing Article Labels\nArticleLabels.prototype.listByArticle = function (articleID, cb) {\n  //We do not need requestAll as the response body is within the field \"labels\" : []\n  this.request('GET', ['articles', articleID, 'labels'], cb);\n};\n\n// ====================================== Showing Article Labels\nArticleLabels.prototype.show = function (labelID, cb) {\n  this.request('GET', ['articles', 'labels', labelID], cb);\n};\n\n// ====================================== Creating Article Labels\nArticleLabels.prototype.create = function (articleID, label, cb) {\n  this.request('POST', ['articles', articleID, 'labels'], label, cb);\n};\n\n// ====================================== Deleting Article Labels\nArticleLabels.prototype.delete = function (articleID, labelID, cb) {\n  this.request('DELETE', ['articles', articleID, 'labels', labelID], cb);\n};\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/helpcenter/articles.js":"//Articles.js: Client for the zendesk help center API.\n\n\nvar util        = require('util'),\n  Client      = require('../client').Client\n//defaultgroups = require('./helpers').defaultgroups;\n\n\nvar Articles = exports.Articles = function (options) {\n  this.jsonAPINames = [ 'articles', 'article' ];\n\n  this.sideLoadMap = [\n    { field: 'author_id', name: 'user', dataset: 'users' },\n    { field: 'section_id', name: 'section', dataset: 'sections' },\n    { field: 'category_id', name: 'category', dataset: 'categories' }\n  ];\n\n  Client.call(this, options);\n};\n\n// Inherit from Client base object\nutil.inherits(Articles, Client);\n\n// ######################################################## Articles\n// ====================================== Listing Articles\nArticles.prototype.list = function (cb) {\n  this.requestAll('GET', ['articles'], cb);//all\n};\n\n// ====================================== Listing Articles By Locale\n\nArticles.prototype.listByLocale = function (locale,cb) {\n  this.requestAll('GET', [locale, 'articles'], cb);//all\n};\n\n// ====================================== Listing Articles Under A Section\n\nArticles.prototype.listBySection = function (sectionID,cb) {\n  this.requestAll('GET', ['sections', sectionID, 'articles'], cb);//all\n};\n\n// ====================================== Listing Articles Under A Section by Locale\n\nArticles.prototype.listBySectionByLocale = function (locale, sectionID,cb) {\n  this.requestAll('GET', [locale, 'sections', sectionID, 'articles'], cb);//all\n};\n\n// ====================================== Listing Articles Under A Category\n\nArticles.prototype.listByCategory = function (categoryID,cb) {\n  this.requestAll('GET', ['categories', categoryID, 'articles'], cb);//all\n};\n\n// ====================================== Listing Articles Belongs To A User\n\nArticles.prototype.listByUser = function (userID,cb) {\n  this.requestAll('GET', ['users', userID, 'articles'], cb);//all\n};\n\n// ====================================== Listing Articles Since Start Time\n\nArticles.prototype.listSinceStartTime = function (startTime,cb) {\n  this.requestAll('GET', ['incremental', 'articles', {'start_time': startTime}], cb);//all\n};\n\n// ====================================== Listing Articles By Label\n\nArticles.prototype.listByLabelNames = function (labelNames,cb) {\n  this.requestAll('GET', ['articles', {'label_names': labelNames.toString()}], cb);//all\n};\n\n\n// ====================================== Viewing Articles\nArticles.prototype.show = function (articleID, cb) {\n  this.request('GET', ['articles', articleID], cb);\n};\n\n// ====================================== Viewing Articles By Locale\nArticles.prototype.showWithLocale = function(locale, articleID, cb) {\n  this.request('GET', [locale, 'articles', articleID], cb);\n};\n\n// ====================================== Creating Articles\nArticles.prototype.create = function (sectionID, article, cb) {\n  this.request('POST', ['sections', sectionID, 'articles'], article, cb);\n};\n\n// ====================================== Creating Articles With Specified Locale\nArticles.prototype.createWithLocale = function (locale, sectionID, article, cb) {\n  this.request('POST', [locale, 'sections', sectionID, 'articles'], article, cb);\n}\n\n// ====================================== Updating Articles\nArticles.prototype.update = function (articleID, article, cb) {\n  this.request('PUT', ['articles', articleID], article, cb);\n};\n\n// ====================================== Updating Articles With Specified Locale\nArticles.prototype.updateWithLocale = function (locale, articleID, article, cb) {\n  this.request('PUT', [locale, 'articles', articleID], article, cb);\n};\n\n// ====================================== Associating Attachments In Bulk\nArticles.prototype.associateAttachmentsInBulk = function (articleID, attachmentIDsInBulk, cb) {\n  this.request('POST', ['articles', articleID, 'bulk_attachments'], attachmentIDsInBulk, cb);\n}\n\n// ====================================== Deleting Articles\nArticles.prototype.delete = function (articleID, cb) {\n  this.request('DELETE', ['articles', articleID],  cb);\n};\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/helpcenter/sections.js":"//Sections.js: Client for the zendesk API.\n\n\nvar util        = require('util'),\n  Client      = require('../client').Client\n//defaultgroups = require('./helpers').defaultgroups;\n\n\nvar Sections = exports.Sections = function (options) {\n  this.jsonAPINames = [ 'sections', 'section' ];\n\n  this.sideLoadMap = [\n    { field: 'category_id', name: 'category', dataset: 'categories' }\n  ];\n\n  Client.call(this, options);\n};\n\n// Inherit from Client base object\nutil.inherits(Sections, Client);\n\n// ######################################################## Sections\n// ====================================== Listing Sections\nSections.prototype.list = function (cb) {\n  this.requestAll('GET', ['sections'], cb);//all\n};\n\n// ====================================== Listing Sections In A Category\nSections.prototype.listByCategory = function (categoryID, cb) {\n  this.requestAll('GET', ['categories', categoryID, 'sections'], cb);//all\n};\n\n// ====================================== Listing Sections By Locale\nSections.prototype.listWithLocale = function (locale, cb) {\n  this.requestAll('GET', [locale, 'sections'], cb);//all\n};\n\n\n// ====================================== Viewing Sections\nSections.prototype.show = function (sectionID, cb) {\n  this.request('GET', ['sections', sectionID], cb);\n};\n\n// ====================================== Viewing Section by locale\nSections.prototype.showWithLocale = function(locale, sectionID, cb) {\n  this.request('GET', [locale, 'sections', sectionID], cb);\n};\n\n// ====================================== Creating Sections\nSections.prototype.create = function (categoryId, section, cb) {\n  this.request('POST', ['categories', categoryId, 'sections'], section, cb);\n};\n\n// ====================================== Creating Sections With Specified Locale\nSections.prototype.createWithLocale = function (locale, categoryId, section, cb) {\n  this.request('POST', [locale, 'categories', categoryId, 'sections'], section, cb);\n}\n\n// ====================================== Updating Sections\nSections.prototype.update = function (sectionID, section, cb) {\n  this.request('PUT', ['sections', sectionID], section, cb);\n};\n\n// ====================================== Updating Sections By Locale\nSections.prototype.updateWithLocale = function (locale, sectionID, section, cb) {\n  this.request('PUT', [locale, 'sections', sectionID], section, cb);\n};\n\n// ====================================== Updating Sections' Source Locale\nSections.prototype.updateSourceLocale = function (sectionID, sourceLocale, cb) {\n  this.request('PUT', ['sections', sectionID, 'source_locale'],sourceLocale, cb);\n}\n\n// ====================================== Deleting Sections\nSections.prototype.delete = function (sectionID, cb) {\n  this.request('DELETE', ['sections', sectionID],  cb);\n};\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/helpcenter/subscriptions.js":"//Subscriptions.js: Client for the zendesk API.\n\n\nvar util        = require('util'),\n    Client      = require('../client').Client\n//defaultgroups = require('./helpers').defaultgroups;\n\n\nvar Subscriptions = exports.Subscriptions = function (options) {\n  this.jsonAPINames = [ 'subscriptions', 'subscription' ];\n  Client.call(this, options);\n};\n\n// Inherit from Client base object\nutil.inherits(Subscriptions, Client);\n\n// ######################################################## Subscriptions\n\n// ====================================== Listing subscriptions by user\nSubscriptions.prototype.listByUser = function (userID, cb) {\n  this.requestAll('GET', ['users', userID, 'subscriptions'], cb);//all\n};\n\n// ====================================== Listing subscriptions by article\nSubscriptions.prototype.listByArticle = function (articleID, cb) {\n  this.requestAll('GET', ['articles', articleID, 'subscriptions'], cb);//all\n};\n\n// ====================================== Listing subscriptions by section\nSubscriptions.prototype.listBySection = function (sectionID, cb) {\n  this.requestAll('GET', ['sections', sectionID, 'subscriptions'], cb);//all\n};\n\n// ====================================== Showing subscriptions by article\nSubscriptions.prototype.showbyArticle = function (articleID, subscriptionID, cb) {\n  this.request('GET', ['articles', articleID, 'subscriptions', subscriptionID], cb);//all\n};\n\n// ====================================== Showing subscriptions by section\nSubscriptions.prototype.showbySection = function (sectionID, subscriptionID, cb) {\n  this.request('GET', ['articles', sectionID, 'subscriptions', subscriptionID], cb);//all\n};\n\n// ====================================== Creating subscriptions by article\nSubscriptions.prototype.createbyArticle = function (articleID, subscription, cb) {\n  this.request('POST', ['articles', articleID, 'subscriptions'], subscription, cb);//all\n};\n\n// ====================================== Creating subscriptions by section\nSubscriptions.prototype.createbySection = function (sectionID, subscription, cb) {\n  this.request('POST', ['articles', sectionID, 'subscriptions'], subscription, cb);//all\n};\n\n// ====================================== Deleting subscriptions by article\nSubscriptions.prototype.deletebyArticle = function (articleID, subscriptionID, cb) {\n  this.request('DELETE', ['articles', articleID, 'subscriptions', subscriptionID], cb);//all\n};\n\n// ====================================== Deleting subscriptions by section\nSubscriptions.prototype.deletebySection = function (sectionID, subscriptionID, cb) {\n  this.request('DELETE', ['articles', sectionID, 'subscriptions', subscriptionID], cb);//all\n};\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/helpcenter/translations.js":"//Translation.js: Client for the zendesk API.\n\n\nvar util        = require('util'),\n  Client      = require('../client').Client\n//defaultgroups = require('./helpers').defaultgroups;\n\n\nvar Translations = exports.Translations = function (options) {\n  this.jsonAPINames = [ 'translations', 'translation' ];\n  Client.call(this, options);\n};\n\n// Inherit from Client base object\nutil.inherits(Translations, Client);\n\n// ######################################################## Translations\n\n// ====================================== Viewing Translations\nTranslations.prototype.show = function (articleID, locale, cb) {\n  this.request('GET', ['articles', articleID, 'translations', locale], cb);\n};\n\n// ====================================== Listing Translations Belongs To An Article\n//Parameters allowed:\n//  locales=en-us,en-uk\n//  outdated=true\nTranslations.prototype.listByArticle = function (articleID, filterParams, cb) {\n  this.requestAll('GET', ['articles', articleID, 'translations',filterParams], cb);\n};\n\n// ====================================== Listing Translations Belongs To A Section\nTranslations.prototype.listBySection = function (sectionID, cb) {\n  this.requestAll('GET', ['sections', sectionID, 'translations'], cb);\n};\n\n// ====================================== Listing Translations Belongs To A Category\nTranslations.prototype.listByCategory = function (categoryID, cb) {\n  this.requestAll('GET', ['categories', categoryID, 'translations'], cb);\n};\n\n// ====================================== Listing Translations Belongs To An Article\nTranslations.prototype.listMissingLocalesByArticle = function (articleID, cb) {\n  this.request('GET', ['articles', articleID, 'translations', 'missing'], cb);\n};\n\n// ====================================== Listing Translations Belongs To A Section\nTranslations.prototype.listMissingLocalesBySection = function (sectionID, cb) {\n  this.request('GET', ['sections', sectionID, 'translations', 'missing'], cb);\n};\n\n// ====================================== Listing Translations Belongs To A Category\nTranslations.prototype.listMissingLocalesByCategory = function (categoryID, cb) {\n  this.request('GET', ['categories', categoryID, 'translations', 'missing'], cb);\n};\n\n// ====================================== Creating Translations For An Article\nTranslations.prototype.createForArticle = function (articleID, translation, cb) {\n  this.request('POST', ['articles',articleID,'translations'], translation, cb);\n};\n\n// ====================================== Creating Translations For A Section\nTranslations.prototype.createForSection = function (sectionID, translation, cb) {\n  this.request('POST', ['sections',sectionID,'translations'], translation, cb);\n};\n\n// ====================================== Creating Translations For A Category\nTranslations.prototype.createForCategory = function (categoryID, translation, cb) {\n  this.request('POST', ['categories',categoryID,'translations'], translation, cb);\n};\n\n// ====================================== Updating Translations For An Article\nTranslations.prototype.updateForArticle = function (articleID, locale, translation, cb) {\n  this.request('PUT', ['articles',articleID,'translations',locale], translation, cb);\n};\n\n// ====================================== Updating Translations For A Section\nTranslations.prototype.updateForSection = function (sectionID, locale, translation, cb) {\n  this.request('PUT', ['sections',sectionID,'translations',locale], translation, cb);\n};\n\n// ====================================== Updating Translations For A Category\nTranslations.prototype.updateForCategory = function (categoryID, locale, translation, cb) {\n  this.request('PUT', ['categories',categoryID,'translations',locale], translation, cb);\n};\n\n// ====================================== Deleting Translations\nTranslations.prototype.delete = function (translationID, cb) {\n  this.request('DELETE', ['translations', translationID],  cb);\n};\n// ====================================== Listing All Enabled Locales And Default Locale\nTranslations.prototype.listLocales = function(cb) {\n  this.request('GET', ['locales'], cb);\n}\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/helpcenter/votes.js":"//Votes.js: Client for the zendesk help center API.\n\n\nvar util        = require('util'),\n  Client      = require('../client').Client\n//defaultgroups = require('./helpers').defaultgroups;\n\n\nvar Votes = exports.Votes = function (options) {\n  this.jsonAPINames = [ 'votes', 'vote' ];\n  Client.call(this, options);\n};\n\n// Inherit from Client base object\nutil.inherits(Votes, Client);\n\n// ######################################################## Votes\n\n// ====================================== Listing Votes By User\n\nVotes.prototype.listByUser = function (userID, cb) {\n  //Do not need requesetAll\n  this.request('GET', ['users', userID, 'votes'], cb);\n};\n\n// ====================================== Listing Votes By Article\n\nVotes.prototype.listByArticle = function (articleID, cb) {\n  //Do not need requesetAll\n  this.request('GET', ['articles', articleID, 'votes'], cb);\n};\n\n// ====================================== Viewing Votes\nVotes.prototype.show = function (voteID, cb) {\n  this.request('GET', ['votes', voteID], cb);\n};\n\n// ====================================== Vote Up For Article\nVotes.prototype.createUpVoteForArticle = function (articleID, cb) {\n  this.request('POST', ['articles' , articleID, 'up'], cb);\n};\n\n// ====================================== Vote Down For Article\nVotes.prototype.createDownVoteForArticle = function (articleID, cb) {\n  this.request('POST', ['articles' , articleID, 'down'], cb);\n};\n\n// ====================================== Vote Up For Question\nVotes.prototype.createUpVoteForQuestion = function (questionID, cb) {\n  this.request('POST', ['questions' , questionID, 'up'], cb);\n};\n\n// ====================================== Vote Down For Question\nVotes.prototype.createDownVoteForQuestion = function (questionID, cb) {\n  this.request('POST', ['questions' , questionID, 'down'], cb);\n};\n\n// ====================================== Vote Up For Answer\nVotes.prototype.createUpVoteForAnswer = function (answerID, cb) {\n  this.request('POST', ['answers' , answerID, 'up'], cb);\n};\n\n// ====================================== Vote Down For Answer\nVotes.prototype.createDownVoteForAnswer = function (answerID, cb) {\n  this.request('POST', ['answers' , answerID, 'down'], cb);\n};\n\n// ====================================== Deleting Votes\nVotes.prototype.delete = function (voteID, cb) {\n  this.request('DELETE', ['votes', voteID],  cb);\n};\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/voice/agentactivity.js":"//AgentActivity.js: Client for the Zendesk Voice API.\n\n\nvar util = require('util'),\n    Client = require('../client').Client\n    //defaultgroups = require('../helpers').defaultgroups;\n\n\nvar AgentActivity = exports.AgentActivity = function(options) {\n    this.jsonAPINames = [ 'agent activity' ];\n    Client.call(this, options);\n};\n\n// Inherit from Client base object\nutil.inherits(AgentActivity, Client);\n\n// ######################################################## AgentActivity\n// ====================================== Showing Agent Activity\nAgentActivity.prototype.show = function(cb) {\n    this.request('GET', ['stats', 'agents_activity'], cb);\n};\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/voice/availabilities.js":"//Availabilities.js: Client for the Zendesk Voice API.\n\n\nvar util = require('util'),\n    Client = require('../client').Client;\n    //defaultgroups = require('../helpers').defaultgroups;\n\n\nvar Availabilities = exports.Availabilities = function(options) {\n    this.jsonAPINames = [ 'availabilities', 'availability' ];\n    Client.call(this, options);\n};\n\n// Inherit from Client base object\nutil.inherits(Availabilities, Client);\n\n// ######################################################## Availabilitiess\n// ====================================== Update Availabilities\nAvailabilities.prototype.update = function(agentID, availability, cb) {\n    this.request('PUT', ['availabilities', agentID], availability, cb);\n};\n\n// ====================================== Get Availabilities by ID\nAvailabilities.prototype.show = function(agentID, cb) {\n    this.request('GET', ['availabilities', agentID], cb);\n};\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/voice/currentqueueactivity.js":"//CurrentQueueActivity.js: Client for the Zendesk Voice API.\n\n\nvar util = require('util'),\n\tClient = require('../client').Client\n\t//defaultgroups = require('./helpers').defaultgroups;\n\n\nvar CurrentQueueActivity = exports.CurrentQueueActivity = function(options) {\n\tthis.jsonAPINames = [ 'current_queue_activity', 'current_queue_activities' ];\n\tClient.call(this, options);\n};\n\n// Inherit from Client base object\nutil.inherits(CurrentQueueActivity, Client);\n\n// ######################################################## Current Queue Activity\n// ====================================== Get Current Queue Activity\nCurrentQueueActivity.prototype.show = function(cb) {\n\tthis.request('GET', ['stats', 'current_queue_activity'], cb);\n};\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/voice/greetingcategories.js":"//GreetingCategories.js: Client for the zendesk API.\n\n\nvar util = require('util'),\n    Client = require('../client').Client;\n    //defaultgroups = require('../helpers').defaultgroups;\n\n\nvar GreetingCategories = exports.GreetingCategories = function(options) {\n    this.jsonAPINames = [ 'greeting_categories', 'greeting_category' ];\n    Client.call(this, options);\n};\n\n// Inherit from Client base object\nutil.inherits(GreetingCategories, Client);\n\n// ######################################################## Greetings\n// ====================================== List Greetings Categories\nGreetingCategories.prototype.list = function(cb) {\n    this.request('GET', ['greeting_categories'], cb);\n};\n\n// ====================================== Get Greetings Category by ID\nGreetingCategories.prototype.show = function(greetingCategoryID, cb) {\n    this.request('GET', ['greeting_category', greetingCategoryID], cb);\n};\n\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/voice/greetings.js":"//Greetings.js: Client for the zendesk API.\n\n\nvar util = require('util'),\n    Client = require('../client').Client;\n    //defaultgroups = require('../helpers').defaultgroups;\n\n\nvar Greetings = exports.Greetings = function(options) {\n    this.jsonAPINames = [ 'greetings', 'greetings' ];\n    Client.call(this, options);\n};\n\n// Inherit from Client base object\nutil.inherits(Greetings, Client);\n\n\n// ====================================== List Greetings\nGreetings.prototype.list = function(cb) {\n    this.request('GET', ['greetings'], cb);\n};\n\n// ====================================== List Greetings by ID\nGreetings.prototype.show = function(greetingID, cb) {\n    this.request('GET', ['greetings', greetingID], cb);\n};\n\n// ====================================== Create Greeting\nGreetings.prototype.create = function(greeting, cb) {\n    this.request('POST', ['greetings'], greeting, cb);\n};\n\n// ====================================== Update Greeting\nGreetings.prototype.update = function(greeting, greetingID, cb) {\n    this.request('PUT', ['greetings', greetingID], greeting, cb);\n};\n\n// ====================================== Delete Greeting\nGreetings.prototype.delete = function(greetingID, cb) {\n    this.request('DELETE', ['greetings', greetingID], cb);\n};\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/voice/historicalqueueactivity.js":"//HistoricalQueueActivity.js: Client for the zendesk API.\n\n\nvar util = require('util'),\n    Client = require('../client').Client;\n    //defaultgroups = require('../helpers').defaultgroups;\n\n\nvar HistoricalQueueActivity = exports.HistoricalQueueActivity = function(options) {\n    this.jsonAPINames = [ 'historical_queue_activity', 'historical_queue_activities' ];\n    Client.call(this, options);\n};\n\n// Inherit from Client base object\nutil.inherits(HistoricalQueueActivity, Client);\n\n// ######################################################## HistoricalQueueActivity\n// ====================================== Showing HistoricalQueueActivity\nHistoricalQueueActivity.prototype.show = function(cb) {\n    this.request('GET', ['stats', 'historical_queue_activity'], cb);\n};\n","/home/travis/build/npmtest/node-npmtest-node-zendesk/node_modules/node-zendesk/lib/client/voice/phonenumbers.js":"//PhoneNumbers.js: Client for the Zendesk Voice API.\n\n\nvar util = require('util'),\n    Client = require('../client').Client;\n    //defaultgroups = require('../helpers').defaultgroups;\n\n\nvar PhoneNumbers = exports.PhoneNumbers = function(options) {\n    this.jsonAPINames = [ 'phone numbers', 'phone number' ];\n    Client.call(this, options);\n};\n\n// Inherit from Client base object\nutil.inherits(PhoneNumbers, Client);\n\n// ######################################################## PhoneNumbers\n// ====================================== Searching Available PhoneNumbers\nPhoneNumbers.prototype.search = function(searchTerm, cb) {\n    this.request('GET', ['phone_numbers', 'search', {query: searchTerm}], cb);\n};\n\n// ====================================== List PhoneNumbers\nPhoneNumbers.prototype.list = function(cb) {\n    this.request('GET', ['phone_numbers'], cb);\n};\n\n// ====================================== Create PhoneNumbers\nPhoneNumbers.prototype.create = function(cb) {\n    this.request('POST', ['phone_numbers'], phone_number, cb);\n};\n\n// ====================================== Update PhoneNumbers\nPhoneNumbers.prototype.update = function(phoneID, phone_number, cb) {\n    this.request('PUT', ['phone_numbers', phoneID], phone_number, cb);\n};\n\n// ====================================== Get PhoneNumbers by ID\nPhoneNumbers.prototype.show = function(phoneID, cb) {\n    this.request('GET', ['phone_numbers', phoneID], cb);\n};\n\n// ====================================== Delete PhoneNumbers\nPhoneNumbers.prototype.delete = function(phoneID, cb) {\n    this.request('DELETE', ['phone_numbers', phoneID], cb);\n};\n"}